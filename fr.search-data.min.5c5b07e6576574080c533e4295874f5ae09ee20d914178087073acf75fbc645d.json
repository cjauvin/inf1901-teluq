[{"id":0,"href":"/inf1901-teluq/docs/modules/module3/activite-3-1/","title":"Activité 3.1","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":1,"href":"/inf1901-teluq/docs/modules/module4/activite-4-1/","title":"Activité 4.1","section":"Module 4: Les entrées et sorties","content":" "},{"id":2,"href":"/inf1901-teluq/docs/modules/module5/activite-5-1/","title":"Activité 5.1","section":"Module 5. La programmation orientée-objet: héritage et le polymorphisme","content":" "},{"id":3,"href":"/inf1901-teluq/docs/modules/module1/1-amorcer-sa-reflexion/","title":"Amorcer sa réflexion","section":"Module 1: Algorithme et pseudocode","content":" Amorcer sa réflexion # Présentation # Ce premier module situe l\u0026rsquo;intelligence artificielle dans une perspective historique d\u0026rsquo;Allan Turing (1912-1954) à aujourd\u0026rsquo;hui. Il est animé de deux intentions générales : Offrir une compréhension d\u0026rsquo;ensemble de l\u0026rsquo;intelligence artificielle d\u0026rsquo;aujourd\u0026rsquo;hui au Québec et au Canada et parcourir les grands jalons de l\u0026rsquo;évolution de l\u0026rsquo;intelligence artificielle dans le temps et l\u0026rsquo;espace tout en soulignant les apports des principaux acteurs et de leurs travaux.\nDurée suggérée # 2 à 3 heures\nÉtape par étape… # Avant toute chose, vous devez avoir pris connaissance du Guide d’étude et exploré l’environnement de formation.\nPrenez maintenant quelques instants pour vous questionner.\nQue sais-je de l\u0026rsquo;intelligence artificielle ? Puis-je nommer une ou deux applications concrètes de l\u0026rsquo;IA dans mon quotidien ? Puis-je affirmer que l\u0026rsquo;IA est une technologie récente ? Pourquoi ? Quelles sont les grandes étapes ou figures marquantes du développement de l\u0026rsquo;IA ? Quelle place occupe l\u0026rsquo;IA dans les entreprises au Québec et au Canada aujourd\u0026rsquo;hui ? Ces premières questions vous aideront à situer votre point de départ, à identifier ce que vous connaissez déjà et ce que vous êtes sur point de découvrir.\nPrenez connaissance des conseils méthodologiques pour le visionnement des vidéoclips.\nVisionnez le vidéoclip 1.1 L\u0026rsquo;intelligence artificielle décodée, un documentaire de Radio-Canada (5 décembre 2023) qui traite des avancées de l\u0026rsquo;IA, ses applications concrètes et des questions éthiques qu\u0026rsquo;elle soulève. Bien que d\u0026rsquo;une durée de 2 heures, cette vidéo permet de démystifier l\u0026rsquo;IA en présentant ses fondements actuels, les questions d\u0026rsquo;éthique qu\u0026rsquo;elle engendre et son impact dans les entreprises du Québec et du Canada.\nRépondez à la question suivante : Est-ce que ce vidéoclip remet en question ou non ce que je pensais l\u0026rsquo;intelligence artificielle aujourd\u0026rsquo;hui ? Si oui, précisez ce que ce vidéo a apporté de plus à ce que vous pensiez de l\u0026rsquo;intelligence artificielle aujourd\u0026rsquo;hui.\n"},{"id":4,"href":"/inf1901-teluq/docs/credits/","title":"Le professeur","section":"Docs","content":" Daniel Lemire est professeur d\u0026rsquo;informatique à l\u0026rsquo;Université du Québec (TELUQ). Il est classé dans les 2 % des meilleurs scientifiques (classement Stanford University/Elsevier, 2024). Il fait partie des 1000 programmeurs les plus suivis au monde sur GitHub; GitHub compte plus de 100 millions de développeurs. Il a publié plus de 85 articles de recherche évalués par des pairs. Ses travaux se retrouvent dans de nombreuses bibliothèques standard (.NET, Rust, GCC/glibc++, LLVM/libc, Go, Node.js, etc.) et dans les principaux navigateurs web (Safari, Chrome, etc.). Il est rédacteur de la revue Software : Practice and Experience (Wiley, créée en 1971). En 2020, il a reçu le Prix d\u0026rsquo;excellence 2020 de l\u0026rsquo;Université du Québec pour ses travaux sur l\u0026rsquo;accélération de l\u0026rsquo;analyse JSON. Ses recherches portent notamment sur la programmation haute performance. Il est @lemire sur X et tient un blog hebdomadaire à l\u0026rsquo;adresse https://lemire.me/blog. On peut aussi le trouver sur GitHub.\n"},{"id":5,"href":"/inf1901-teluq/docs/modules/module1/","title":"Module 1: Algorithme et pseudocode","section":"Modules","content":" Module 1 # Ce premier module propose une exploration des enjeux cruciaux de l\u0026rsquo;intelligence artificielle et de son impact sur la société d\u0026rsquo;aujourd\u0026rsquo;hui tout en jettant un regard sur l\u0026rsquo;évolution de l\u0026rsquo;intelligence artificielle du test de Turing (1950) qui marque le premier pas vers l\u0026rsquo;intelligence artificielle à l\u0026rsquo;émergence des grands modèles de langages (LLM) comme GPT-4, d\u0026rsquo;autre part.\nObjectifs # À la fin de ce module, vous devriez être en mesure de :\nNommer les grandes phases de l\u0026rsquo;évolution historique de l\u0026rsquo;IA et d\u0026rsquo;y rattacher les grands noms qui y ont contribué; Énumérer des perspectives prometteuses offertes par l\u0026rsquo;IA à diverses catégories d\u0026rsquo;entreprises québécoises et canadiennes; Dresser un état des lieux des avancées technologiques actuelles et des débats éthiques qu\u0026rsquo;elles encourent; Décrire les risques et les menaces potentiels associés à l\u0026rsquo;IA Durée (à préciser) # 2 à 3 semaines, soit de 18 à 27 heures de travail.\nTravail noté # Le travail noté 1 comptant pour 10 % de l\u0026rsquo;évaluation finale consiste à représenter une ligne de temps documentée, marquant l\u0026rsquo;évolution de l\u0026rsquo;intelligence artificielle depuis ses fondations (Turing, 1950) jusqu\u0026rsquo;à aujourd\u0026rsquo;hui. Cette ligne de temps doit indiquer votre sélection de cinq grandes étapes de l\u0026rsquo;histoire de l\u0026rsquo;intelligence artificielle en y associant le ou les principaux scientifiques ainsi qu\u0026rsquo;une description des innovations ou travaux qui s\u0026rsquo;y rattachent.\n"},{"id":6,"href":"/inf1901-teluq/docs/modules/module2/preparation/","title":"Préparation de l’espace de travail","section":"Module 2: Introduction à l'apprentissage machine","content":"Module 2Activité 2.1Préparation de l'espace de travailSommaire\nUtilisation d'un environnement de programmation en ligne Installation du Java Development Kit (JDK) Utilisation d'un éditeur de texte Installation de l'IDE IntelliJ IDEA Installation de l'IDE Netbeans Installation de l'IDE Eclipse Qu'est-ce que le professeur utilise? Comme langage de support à l'introduction des concepts de programmation, nous utiliserons le langage Java. Tel que présenté dans l'introduction du cours, le langage Java est un langage interprété multi-plateforme où le code est pré-compilé dans un ensemble d'instructions intermédiaires (appelé Java bytecode), puis interprété sur chaque système d'exploitation à partir de la machine virtuelle Java. Celle-ci transforme alors le bytecode en instructions machine propre au système d'exploitation et aux processeurs spécifiques de l'ordinateur.\nSi ce n'est pas déjà fait, il est maintenant temps de configurer un environnement de développement Java. Dans ce cours, vous pouvez utiliser l'environnement de programmation qui vous convient le mieux ou qui fonctionne bien pour vous. Vous n'avez pas à utiliser une approche spécifique.\nDans ce cours vous devez faire preuve d'un minimum de débrouillardise. En particulier, vous devez être à même de choisir l'environnement qui vous convient le mieux. Cette démarche d'appropriation fait partie intégrante du cours. Nous n'offrons pas de soutien technique concernant les outils logiciels que vous choisissez d'installer sur vos ordinateurs. Nous vous invitons à procéder par essai/erreur et à faire les recherches nécessaires.\nQuand vous testez un nouvel environnement, utilisez du code Java simple et bien testé. Si vous ne connaissez pas bien le Java, ne commencez pas à expérimenter avec la programmation tout en testant un nouvel environnement. Allez-y une étape à la fois.\nUtilisation d'un environnement de programmation en ligne Plusieurs étudiants préfèrent un environnement de développement conventionnel, installé sur leur PC. D'autres étudiants peuvent avoir une préférence pour les environnements en ligne qui ne nécessitent aucune installation. Il y a plusieurs environnements en ligne, nous vous invitons à les explorer, en commençant par les suggestions suivantes :\nrepl.it ideone Ces outils en ligne vous permettent de saisir votre code, dans le navigateur, et de l'exécuter par la suite. Vous pouvez faire une grande partie du cours en utilisant seulement un outil comme repl.it. En effet, le cours se concentre principalement sur la programmation. Les outils d'aide à la programmation sont moins importants. Nous ne ferons pas de grands projets dans ce cours qui nécessitent beaucoup de gestion de code.\nLa vidéo suivante illustre l'utilisation de repl.it (il n'est pas nécessaire d'écouter la narration en anglais pour comprendre): Truc: Avec repl.it, vous pouvez ouvrir une console avec les touches ctrl-shift-s où vous pouvez exécuter des commandes comme « javac Main.java » et « java Main ».\nDans le cours, vous trouverez des exemples utilisant repl.it, mais l'utilisation de repl.it est optionnelle. Si repl.it ne fonctionne pas bien pour vous, utilisez autre chose.\nUne des limites d'un environnement comme repl.it est qu'ils ne permettent pas la production d'interfaces graphiques. Ainsi, certains exemples ne peuvent fonctionner sous repl.it.\nNotez bien: Certains des exemples repl.it comprennent plusieurs fichiers. Comme dans plusieurs interfaces, repl.it ne permet de voir le contenu que d'un seul fichier à la fois. Par contre, il vous permet de naviguer entre différents fichiers. Nous verrons dans ce cours que Java exige que les \"classes\" soient définies au sein de fichiers du même nom, ce qui implique souvent que nous utilisions plusieurs fichiers avec des noms prédéterminés. Cette contrainte en ce qui a trait aux fichiers n'est pas spécifique à repl.it. En Java, il y a un lien direct entre le nom des fichiers et leur contenu. Dans ce cours, vous devez faire preuve de débrouillardise et nous supposons que vous trouverez comment faire pour naviguer et voir les différents fichiers. Instructions détaillées pour Repl.it Repl.it est une plateforme en ligne qui permet d’écrire, d’exécuter et de tester du code Java directement dans votre navigateur, sans avoir besoin d’installer un environnement de développement sur votre ordinateur. Pour commencer, accédez aux liens Repl.it fournis dans le cours. Cliquez sur un lien pour ouvrir le projet Java correspondant. Vous verrez une interface avec un éditeur de code à gauche, où le code est déjà chargé, et une console à droite pour afficher les résultats. Si vous n’êtes pas encore inscrit, créez un compte gratuit sur Repl.it en utilisant votre adresse e-mail ou un compte Google. Une fois connecté, vous pouvez modifier le code directement dans l’éditeur. Pour exécuter votre programme, cliquez sur le bouton vert « Run » en haut de la page. La console affichera les sorties ou les erreurs, ce qui vous permettra de vérifier si votre code fonctionne comme prévu.\nPour travailler efficacement sur Repl.it, familiarisez-vous avec ses fonctionnalités principales. Vous pouvez créer un nouveau fichier ou répertoire dans votre projet en cliquant sur l’icône « + » dans la barre latérale. Si vous modifiez le code fourni dans les liens du cours, assurez-vous de ne pas écraser les instructions ou les parties essentielles sans les comprendre. Avec un peu de pratique, Repl.it deviendra un outil puissant et intuitif pour développer vos compétences en programmation Java.\nInstallation du Java Development Kit (JDK) Système d'exploitation Microsoft Windows : Je vous suggère d'installer le JDK à partir du site https://adoptium.net/. La vidéo suivante illustre comment y arriver sous Windows en moins de deux minutes: Aller sur le site https://adoptium.net/. La version a peu d'importance; choisir la dernière version disponible. Une fois le fichier d'installation téléchargé, démarrer l'installation et suivre les différentes étapes d'installation. Une fois le logiciel installé, la machine virtuelle Java (java.exe) et ses outils de compilation (javac.exe) auront été installés. macosNous vous suggérons d'utiliser https://adoptium.net/ encore une fois.\nLinux Debian Si vous êtes un utilisateur de Linux et plus particulièrement de Debian (ou Ubuntu), vous savez probablement déjà utiliser les Debian Packages! Pour installer la JDK, il faut ouvrir l'invite de commande (la console...), se mettre en mode super-utilisateur (su) et exécuter la commande « apt-get install default-jdk ».\nUtilisation d'un éditeur de texte La plupart des langages de programmation s'utilisent avec des fichiers de texte. Le fichier n'est qu'une séquence de caractères sans autre structure particulière. L'outil le plus simple en programmation est donc le simple éditeur de texte. Comme le nom l'indique, l'éditeur de texte vise principalement à éditer des fichiers de texte. Notons que les traitements de texte (comme Word) ne sont pas fait pour éditer des fichiers de texte. Par ailleurs, un éditeur de texte ne peut pas, par lui-même, compiler et exécuter des programmes. Il sert surtout à écrire le code.\nLe meilleur éditeur de fichier texte est sans doute Visual Studio Code (à ne pas confondre avec Visual Studio). Microsoft rend disponible un guide d'utilisation de Visual Studio Code avec java.\nNous recommandons Visual Studio Code plutôt que l'utilisation d'un environnement comme IDEA, Eclipse ou NetBeans. L'utilisation d'un éditeur de texte combiné avec le JDK vous met davantage en charge du développement.\nInstallation de l'IDE IntelliJ IDEA Lecture suggérée : Environnement de développement\nVous pouvez installer l'IDE IntelliJ IDEA. L'utilisation d'un IDE n'est pas obligatoire, mais cela est recommandé. IntelliJ IDEA est un excellent choix.\nRendez-vous sur https://www.jetbrains.com/idea/. Cliquez sur Download. Sous \"Community\", cliquez sur Download. Cette version est gratuite. L'enregistrement du programme d'installation devrait débuter. Suivez ensuite les consignes. Nous croyons que IntelliJ IDEA est supérieur aux autres IDE, étant plus élégant et convivial. Cependant, le choix vous appartient.\nNotez que nous n'offrons pas de soutien technique pour les IDE dans ce cours. Si vous optez pour IntelliJ IDEA, vous devrez vous en remettre au soutien technique et à la documentation de l'entreprise qui fournit le produit. Nous sommes là pour vous appuyer dans l'apprentissage de la programmation et du Java, mais pas dans l'utilisation d'un IDE spécifique.\nLes IDE ont la fâcheuse habitude d'automatiser plusieurs opérations ce qui ne pose pas de problème aux programmeurs expérimentés, mais qui est souvent déroutant pour les débutants. Les IDE vont souvent créer des répertoires, des « paquetages » et avoir différentes attentes quant à l'endroit où les différentes fonctions et classes doivent être. Le résultat net est que les étudiants sont souvent confrontés à des messages d'erreur qui les laissent perplexes après des modifications faites en utilisant l'interface graphique (par exemple, après le déplacement d'un fichier). Si vous utilisez un IDE, il faut apprendre à travailler selon les attentes de l'IDE. À terme, certains programmeurs trouvent que l'utilisation d'un IDE les rend plus productifs, mais quand on débute, l'IDE est un obstacle supplémentaire pour certains étudiants.\nInstallation de l'IDE Netbeans Si vous avez installé IntelliJ IDEA, il n'est sans doute pas nécessaire d'installer aussi Netbeans. Cependant, vous pouvez installer les deux, pour comparer.\nCet IDE possède un éditeur visuel bien fait, stable et complet. Pour installer Netbeans (lors de la dernière mise à jour du cours, il s'agissait de la version Apache Netbeans 11; Depuis Janvier 2019, la gestion du projet Netbeans a passé de Oracle vers l'organisation Apache, vous pouvez utiliser les versions plus récentes sous Apache ainsi que la dernière version d'Oracle 8.2), vous devez suivre les étapes suivantes :\nSuivre le lien suivant: https://netbeans.apache.org/download/index.htmlTélécharger la version \"binaries\" (déjà compilée).Une fois le fichier .zip téléchargé, veuillez le décompresser dans un répertoire personnel. Ouvrez le répertoire ./netbeans/bin, les exécutables pour lancer Netbeans s'y trouvent.Vous pouvez démarrer maintenant Netbeans. Au démarrage, vous pouvez spécifier dans quel répertoire vous voulez que vos projets de programmation soient « sauvegardés ». Par défaut, il s'agit de « C:\\Users\\VotreNomUtilisateur\\Documents\\NetBeansProjects ». Si vous optez pour NetBeans, vous devrez vous en remettre au soutien technique et à la documentation de l'entreprise qui fournit le produit.\nInstallation de l'IDE Eclipse Si vous avez installé IntelliJ IDEA ou Netbeans, il n'est sans doute pas nécessaire d'installer aussi Eclipse. Cependant, vous pouvez installer les trois, pour comparer.\nRendez-vous sur http://www.eclipse.org. Cliquez sur Download. Il peut être nécessaire de cliquer sur Download à plus d'une reprise, alors que différentes pages sont chargées. L'enregistrement du programme d'installation devrait débuter. Suivez ensuite les consignes. [embed width=\u0026ldquo;600\u0026rdquo; height=\u0026ldquo;800\u0026rdquo;]https://www.youtube.com/embed/3vhLoQZOEzU[/embed]\nSi vous optez pour Eclipse, vous devrez vous en remettre au soutien technique et à la documentation de l'entreprise qui fournit le produit.\nErreurs et avertissements Java pourra émettre certains messages lors de la compilation et de l'exécution de vos programmes. Il y a d'une part les messages d'erreur. Dans un tel cas, le programme ne peut être compilé ou exécuté. Il y a d'autre part les messages d'avertissement. Le plus souvent, on peut ignorer les messages d'avertissement. Ils servent avant tout à attirer l'attention du programmeur sur des problèmes potentiels, mais ils ne nuisent pas à la compilation et à l'exécution.\nIl est important de faire la différence entre une erreur et un avertissement. Vous ne devez pas confondre les deux concepts lorsque vous programmez. Soyez précis!\nLes choix du professeur Le cours INF 1220 est développé en utilisant en grande partie repl.it. Bien que l'outil ne soit pas parfait, le fait de pouvoir travailler à partir de n'importe quelle machine dotée d'un navigateur web, sans rien à configurer, est vraiment génial. Par ailleurs, l'aisance avec laquelle on peut partager du code fonctionnel est vraiment géniale. Par ailleurs, s'il faut que je développe du code plus substantiel, j'utilise Visual Studio Code. Je suis actif au sein de plusieurs projets et Visual Studio Code a plusieurs avantages. Il fonctionne pratiquement partout. Visual Studio Code me permet de \"programmer\" dans une multitude de langages, de LaTeX à Go en passant par Haskell, Markdown, C++, etc. Je peux facilement combiner Visual Studio Code a plusieurs autres outils. Je peux développer aussi bien sous docker qu'avec ssh, etc. Le programmeur qui peut travailler avec un simple éditeur de texte peut travailler quasiment partout, et dans tous les langages. Cela ne signifie pas qu'il faille pour autant éviter d'utiliser des outils: au contraire, les bons outils sont essentiels. Lecture optionnelle: What is “modern” programming? (billet en anglais du professeur)\n"},{"id":7,"href":"/inf1901-teluq/docs/modules/module3/activite-3-2/","title":"Activité 3.2","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":8,"href":"/inf1901-teluq/docs/modules/module4/activite-4-2/","title":"Activité 4.2","section":"Module 4: Les entrées et sorties","content":" "},{"id":9,"href":"/inf1901-teluq/docs/modules/module5/activite-5-2/","title":"Activité 5.2","section":"Module 5. La programmation orientée-objet: héritage et le polymorphisme","content":" "},{"id":10,"href":"/inf1901-teluq/docs/modules/module2/","title":"Module 2: Introduction à l'apprentissage machine","section":"Modules","content":" Module 2 # Dans le module 2, le concept de programme est exploré en profondeur, constituant une étape clé pour maîtriser les bases de la programmation. Ce module introduit les éléments fondamentaux qui composent un programme : les types, les fonctions, les méthodes et les variables. Les types permettent de définir la nature des données manipulées, tandis que les fonctions et les méthodes offrent des outils pour structurer le code de manière modulaire et réutilisable. Les variables, quant à elles, servent à stocker et gérer des informations de façon efficace. À travers des exemples concrets et des exercices pratiques, ce module montre comment ces composants s’assemblent pour créer des programmes cohérents et fonctionnels, jetant ainsi les bases d’un apprentissage solide.\nLe module 2 aborde également la distinction entre les variables de classe et les variables locales, une notion essentielle pour organiser le code de manière claire et efficace. Les variables de classe, accessibles à l’échelle d’un programme ou d’un objet, facilitent la gestion des données globales, tandis que les variables locales, restreintes à un contexte spécifique, favorisent la clarté et la modularité du code. Grâce à des activités pratiques, notamment en Java, ce module permet de comprendre la portée et le cycle de vie des variables. En s’appuyant sur les exemples du manuel Java pas à pas et du site web du cours, il offre une opportunité de consolider les compétences en programmation tout en développant la capacité à concevoir des solutions logiques et bien structurées.\nLe cours comprend aussi plusieurs exemples de code Java exécutable en ligne, comme cet exemple :\nHelloWorld.javapublic class HelloWorld { public static void main(String[] args) { if(args.length \u0026gt; 0 \u0026amp;\u0026amp; args[0].equals(\u0026#34;fr\u0026#34;)) { System.out.println(\u0026#34;Bonjour, INF 1220 !\u0026#34;); } else { System.out.println(\u0026#34;Hello, INF 1220 !\u0026#34;); } System.out.println(\u0026#34;Bonjour, INF 1220 !\u0026#34;); } } Exécuter Ce programme Java, appelé HelloWorld, est un petit exemple qui affiche le message \u0026ldquo;Bonjour, INF 1220 !\u0026rdquo; à l\u0026rsquo;écran. Imaginez une classe comme une boîte qui contient des instructions, et ici, notre boîte s\u0026rsquo;appelle HelloWorld. À l\u0026rsquo;intérieur, il y a une action spéciale nommée main, qui est comme la porte d\u0026rsquo;entrée du programme : c\u0026rsquo;est par là que tout commence quand vous lancez le code. La ligne public static void main(String[] args) crée cette porte d\u0026rsquo;entrée, et String[] args est juste un moyen de donner des informations supplémentaires au programme (on ne s\u0026rsquo;en sert pas ici). Ensuite, l\u0026rsquo;instruction System.out.println(\u0026ldquo;Bonjour, INF 1220 !\u0026rdquo;); est comme une commande qui dit à l\u0026rsquo;ordinateur d\u0026rsquo;écrire \u0026ldquo;Bonjour, INF 1220 !\u0026rdquo; dans la console, un peu comme si vous écriviez sur une feuille. En gros, ce code est une première étape pour apprendre à donner des ordres simples à l\u0026rsquo;ordinateur avec Java !\nVous devriez pouvoir exécuter le code et prendre connnaissance du résultat. Vous pouvez aussi modifier le code, etc. À la fin du cours, vous serez capable de réaliser des tâches complexes avec la programmation Java.\n"},{"id":11,"href":"/inf1901-teluq/docs/modules/module2/oriente/","title":"Qu’est-ce qu’un langage de programmation orientée-objet?","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":12,"href":"/inf1901-teluq/docs/modules/module1/2-s-informer/","title":"S'informer","section":"Module 1: Algorithme et pseudocode","content":" S\u0026rsquo;informer # Présentation # Au cours de cette activité, vous êtes invité à lire des textes. Par l’étude de ces documents, vous découvrirai l\u0026rsquo;histoire de l\u0026rsquo;IA à travers les diverses phases qui ont marqué son évolution et les scientifiques qui ont apporté leur contribution à ce difficile passage entre l\u0026rsquo;intelligence cognitive, en particulier des processus cognitifs comme la perception, l\u0026rsquo;attention, la mémoire, le langage, le raisonnement, l\u0026rsquo;apprentissage, et l\u0026rsquo;intelligence artificielle telle que nous l\u0026rsquo;a livré le documentaire L\u0026rsquo;Intelligence artificielle décodée[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.] (5 décembre 2023) de Radio Canada.\nDurée suggérée # De 8 à 12 heures\nÉtape par étape… # En premier lieu, Lisez le prologue à l\u0026rsquo;ouvrage de Dehaene et al (2018) qui vous introduira aux fondements de l\u0026rsquo;IA à travers son passage de l\u0026rsquo;intelligence humaine à l\u0026rsquo;intelligence numérique :\nTexte 1.1 Girardon, J. (2018). L\u0026rsquo;insaisissable intelligence. Dans Dehaene, S., Le Cun, Y., Girardon, J. (2018). La plus belle histoire de l\u0026rsquo;intelligence. Des origines aux neurones artificiels: vers une nouvelle étape de l\u0026rsquo;évolution. Prologue, 7-29. Prenez connaissance des conseils méthodologiques pour des lectures actives. Lisez et étudiez les documents suivants ci-dessous ou les passages suggérés dans les ouvrages de Yan Le Cun (2019) et Girardon (2018). Ces textes vous fournira une information substantielle qui vous habilitera à réaliser votre travail noté à l\u0026rsquo;activité 5 de ce premier module :\nTexte 1.2 Mucci, Tim (21 octobre 2024). L\u0026rsquo;histoire de l\u0026rsquo;intelligence artificielle avant le 20e siècle 1900-1950; 1050-1980; 1980-2000; 2000-2020; 2021[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.]- Maintenant.\nTexte 1.3 Stark, L., Pylyshyn, Z. W., Baker, N., Poulin, J. (2024). Intelligence artificielle (IA) au Canada. Dans Encyclopédie Canadienne[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.].\nTexte 1.4 Davat, A. (avril 2024). Perspective historique et enjeux constitutifs de l\u0026rsquo;IA générative[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.]. Dans Les émotions sont-elles des données comme les autres ? Enjeux de la coopération entre les équipes créatives et les IA génératives.\nTexte 1.5 Dehaene, S., Le Cun, Y., Girardon, J. (2018). Comment l\u0026rsquo;intelligence vint aux ordinateurs. Dans Dehaene, S. et al (2018) La plus belle histoire de l\u0026rsquo;intelligence: des origines aux neurones artificiels: vers une nouvelle étape de l\u0026rsquo;évolution. Robert Lafond. Chap. 4, pp. 147-170.\nTexte 1.6 Dehaene, S., Le Cun, Y., Girardon, J. (2018). Ordinateur vs Homo Sapiens : Le match. Dans Dehaene, S., Le Cun, Y., Girardon, J. (2018). La plus belle histoire de l\u0026rsquo;intelligence: des origines aux neurones artificiels: vers une nouvelle étape de l\u0026rsquo;évolution. Robert Lafond. Chap. 5, pp. 171-199.\nTexte 1.7. Le Cun, Y. (2019). Brève histoire de l\u0026rsquo;IA\u0026hellip;et de ma carrière. Dans Quand la machine apprend: la révolution des neurones artificiels et l\u0026rsquo;apprentissage profond. Odile Jacob. 27-80.\nSi vous le souhaitez, faites des va-et-vient entre vos lectures et l’activité 5[Lien s’ouvrant dans une autre page ou onglet.] Fondements et histoire de l\u0026rsquo;IA. Vous pourrez ainsi noter vos connaissances entre deux lectures ou après une série de lectures en vue de la réalisation la ligne du temps de l\u0026rsquo;évolution de l\u0026rsquo;IA, ou vous pouvez le faire uniquement quand vous aurez fini d’étudier tous les textes.\nUtilisez un moteur de recherche ou des agents conversationnels tels ChatGPT (Open AI) ou des moteurs de recherche augmentés par l\u0026rsquo;IA tels You.com ou, encore, tout autre outil de l\u0026rsquo;intelligence artificielle générative, pour aller plus loin ou approfondir un sujet en particulier.\n"},{"id":13,"href":"/inf1901-teluq/docs/erreurs/","title":"Vous avez trouvé une erreur?","section":"Docs","content":"Amélioration continue du cours Le site web de ce cours est continuellement mis à jour avec de nouveaux exemples, de nouvelles explications, de nouvelles références. Le manuel est aussi mis à jour quand nous trouvons des erreurs.\nVous pouvez, de manière anonyme, nous faire parvenir vos corrections lorsque vous trouvez des erreurs sur le site. Nous apprécions toujours vos commentaires constructifs.\nNote: plusieurs étudiants partagent avec nous des suggestions de sites ou de vidéos en anglais. Bien que le cours fait quelques liens vers des sites en anglais, nous évitons l'anglais autant que possible. Si vous avez des suggestions, essayez de rester en français.\nIl arrive qu'on se trompe! Quand ça se produit, prenez la peine de nous en informer. Nous corrigeons toujours rapidement nos erreurs.\n"},{"id":14,"href":"/inf1901-teluq/docs/modules/module3/activite-3-3/","title":"Activité 3.3","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":15,"href":"/inf1901-teluq/docs/modules/module1/3-consolider-ses-connaissances/","title":"Consolider ses connaissances","section":"Module 1: Algorithme et pseudocode","content":" Consolider ses connaissances # Présentation # Dans cette activité, nous vous proposons une série de questions qui porteront spécifiquement sur le contenu du documentaire L\u0026rsquo;intelligence artificielle décodée[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.] de Radio Canada (7 décembre 2023). Ce questionnaire vous permettra de consolider vos connaissances sur les progrès de l\u0026rsquo;IA, bien que ce domaine soit toujours en évolution, sur diverses applications dont en médecine, sur les défis éthiques et sociaux qu\u0026rsquo;elle soulève et l\u0026rsquo;impact positifs ou négatifs de l\u0026rsquo;IA sur la société.\nDurée suggérée # De 2 à 3 heures\nÉtape par étape… # Accédez au test L\u0026rsquo;intelligence artificielle décodée. Répondez aux questions et analysez attentivement vos réponses en vous demandant : « Quels sont les arguments qui font que cette réponse pourrait être la bonne? » et « Quels sont les arguments qui font que cette réponse pourrait être une mauvaise réponse? ».\nVérifiez votre réponse en cliquant sur le bouton « SOLUTION ». Pour chaque question, la réponse et une explication sont fournies.\n"},{"id":16,"href":"/inf1901-teluq/docs/modules/module4/exercices-4-1/","title":"Exercices 4.1","section":"Module 4: Les entrées et sorties","content":" "},{"id":17,"href":"/inf1901-teluq/docs/modules/module5/exercices-5-1/","title":"Exercices 5.1","section":"Module 5. La programmation orientée-objet: héritage et le polymorphisme","content":" "},{"id":18,"href":"/inf1901-teluq/docs/modules/module2/typeoperateur/","title":"Introduction aux types de base et à leurs opérateurs.","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":19,"href":"/inf1901-teluq/docs/modules/module3/","title":"Module 3: Les structures de données, de contrôle et d'itération en Java","section":"Modules","content":" Module 3 # Le module 3 se concentre sur les structures essentielles de la programmation en Java, en abordant les structures de données, de contrôle et d’itération. Les structures de données, telles que les tableaux et les listes, permettent d’organiser et de manipuler des ensembles d’informations de manière efficace. Les structures de contrôle, comme les conditions et les branchements, offrent les outils nécessaires pour prendre des décisions logiques dans un programme. Quant aux structures d’itération, elles permettent d’exécuter des blocs de code de manière répétée, facilitant le traitement de données complexes. À travers des exemples pratiques et des exercices tirés du manuel Java pas à pas et du site du cours, ce module enseigne comment combiner ces structures pour créer des programmes robustes et bien organisés.\nCe module explore également la manipulation des chaînes de caractères, une compétence clé pour traiter des données textuelles en Java. Les apprenants découvrent comment utiliser les méthodes associées aux chaînes pour effectuer des opérations comme la concaténation, la recherche ou le remplacement de texte. Par ailleurs, le module met l’accent sur la mise en œuvre d’algorithmes à l’aide de boucles, permettant de résoudre des problèmes de manière systématique et efficace. En s’appuyant sur des activités pratiques, ce module aide à développer une compréhension approfondie des techniques algorithmiques et renforce la capacité à concevoir des solutions programmées adaptées à des besoins variés, tout en consolidant les compétences acquises dans les modules précédents.\n"},{"id":20,"href":"/inf1901-teluq/docs/modules/module2/exercices-2-1/","title":"Exercices 2.1","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":21,"href":"/inf1901-teluq/docs/modules/module3/exercices-3-1/","title":"Exercices 3.1","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":22,"href":"/inf1901-teluq/docs/feuille-de-route/","title":"Feuille de route","section":"Docs","content":" Feuille de route Prévoyez environ 9 heures de travail pendant quinze semaines. Il n'est pas possible, pour la plupart des étudiants, de réussir ce cours en ne prenant qu'une poignée d'heures par semaine. Chaque étudiant a sa propre date de départ et date de fin de cours personnalisée. La date à laquelle l'étudiant doit passer son examen est déterminé par l'Université: celle-ci vous fera parvenir les détails en temps opportun. Le professeur ne peut pas changer vos dates de départ, de fin ou d'examen: vous devez joindre l'Université si vous souhaitez les modifier. Il n'y a pas de dates fixes pour la remise des travaux, mais il est recommandé de prévoir une semaine de travail pour la réalisation de chacun de ceux-ci et de les remettre selon l'ordre de présentation du cours. Tous les étudiants ne vont pas avancer au même rythme dans le cours. Nous vous suggérons cependant de remettre vos travaux notés lors de la semaine indiquée par le tableau suivant :\nActivitésemaine de remise\tTravail noté 12\tTravail noté 25\tTravail noté 38\tTravail noté 410\tTravail noté 514\tExamen sous surveillance15 ou plus Il est parfaitement normal de consacrer des dizaines d'heures à compléter un travail noté et les activités préparatoires. Il est de votre responsabilité de trouver le temps nécessaire.\nSi vous trouvez certaines sections du cours plus faciles, n'hésitez pas à avancer plus rapidement. Organisation du cours Module 1. Algorithme et pseudocode. Dans ce module, vous verrez comment concevoir des algorithmes simples et comment les présenter de manière précise en français. Module 2. Introduction au langage Java. Le concept de programme. Les types, les fonctions, les méthodes, les variables. Les variables de classe et les variables locales. Module 3. Les structures de données, de contrôle et d'itération en Java. Manipulation de chaînes de caractères. Mise en oeuvre d'algorithmes avec des boucles. Module 4. Les entrées et sorties. Module 5. La programmation orientée-objet: héritage et le polymorphisme. "},{"id":23,"href":"/inf1901-teluq/docs/modules/module1/4-enjeux-ethiques/","title":"Initier sa réflexion sur les enjeux éthiques de l'IA","section":"Module 1: Algorithme et pseudocode","content":" Initier sa réflexion sur les enjeux éthiques de l\u0026rsquo;IA # Présentation # Cette activité 4 du module 1 vise, d\u0026rsquo;une part, à vous instruire sur les principaux enjeux et défis éthiques pour rendre l\u0026rsquo;IA responsable et, d\u0026rsquo;autre part, pour vous sensibiliser à deux questions spécifiques sur l\u0026rsquo;IA que sont les nouveautés de Google et d\u0026rsquo;Open AI et les bulletins de nouvelles générés par l\u0026rsquo;IA où il est difficile de différencier le vrai du faux.\nCette activité orientée vers une réflexion sur les enjeux éthiques de l\u0026rsquo;IA se poursuivra au cours de modules 2, 3 et 4. Diverses mises en situation solliciteront une prise de position argumentée de votre part sur divers des enjeux éthiques de l\u0026rsquo;IA; ce qui vous conduira à affirmer un choix entre deux ou plusieurs actions qui sont en conflit les unes avec les autres où ce choix de l\u0026rsquo;action ou de l\u0026rsquo;orientation à prendre peut entrainer des conséquences négatives.\nDurée suggérée # De 2 à 3 heures\nÉtape par étape… # Visionner la présentation de Sébastien Gambs Quels sont les enjeux et défis éthiques principaux pour rendre l\u0026rsquo;IA responsable ?[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.] Sébastian Gambs, professeur au département d\u0026rsquo;informatique de l\u0026rsquo;Université du Québec à Montréal et titulaire de la Chaire de recherche du Canada en analyse respectueuse de la vie privée et éthique des données massives. s\u0026rsquo;intéresse à résoudre les problématiques éthiques telles que l\u0026rsquo;équité, la transparence et l\u0026rsquo;imputabilité algorithmique soulevées par les systèmes personnalisés. (Gambs, Sébastien (7 mai 2022). Quels sont les enjeux éthiques principaux pour rendre l\u0026rsquo;IA responsable ? [communication orale]. Dans Time World Intelligence artificielle[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.], Université de Montréal - Campus MIL.\nVisionner les deux documentaires de Radio-Canada suivants Radio-Canada (2024, 17 mai). Une nouvelle ère de l\u0026rsquo;IA. [Zone économie : Des questions sur l\u0026rsquo;IA). Radio-Canada. https://ici.radio-canada/info/videos1-8944355/une-nouvelle-ere-ia[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.]. Radio-Canada (2024, 29 avril). Des bulletins télévisés générés par l\u0026rsquo;intelligence artificielle. [Le téléjournal avec Céline Galipeau]. Radio-Canada. https://www.youtube.com/watch?v=YAEuhn5GGY[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.]. Enrichir votre réflexion sur l\u0026rsquo;éthique en IA en lisant Farnadi, G., Alves, A. L. D. L., et Salganik, R. (2023). Le secteur de l\u0026rsquo;IA du point de vue de l\u0026rsquo;éthique. Angles morts de la gouvernance de l\u0026rsquo;IA[Lien menant à un site externe qui pourrait ne pas répondre aux normes d’accessibilité web.]. 31. En dernier lieu, nous vous invitons à joindre le forum INF 1901 pour partager votre point de vue avec vos collègues étudiants sur la question que pose Jacques Girardon (2018) dans La plus belle histoire de l\u0026rsquo;intelligence. Des origines aux neurones artificiels : vers une nouvelle étape de l\u0026rsquo;évolution à ses collègues Stanislas Dehaene et Yan Le Cun dans le chapitre 9 Démons et merveilles, pp. 280 : Est-ce que l\u0026rsquo;intelligence artificielle sera la chose au monde la mieux partagée ou deviendra-t-elle une arme ?\n"},{"id":24,"href":"/inf1901-teluq/docs/modules/module4/","title":"Module 4: Les entrées et sorties","section":"Modules","content":" Module 4 # Le module 4 se consacre aux concepts d’entrées et de sorties, des composantes fondamentales pour interagir avec les utilisateurs et gérer les données dans un programme Java. Les entrées permettent de collecter des informations provenant de sources externes, telles que les saisies clavier ou les fichiers, tandis que les sorties servent à afficher ou à enregistrer les résultats, que ce soit à l’écran ou dans des fichiers. Ce module explore les techniques et les classes Java dédiées à ces opérations, comme Scanner pour les entrées et System.out pour les sorties. À travers des exercices pratiques tirés du manuel Java pas à pas et du site du cours, les apprenants acquièrent la capacité de concevoir des programmes interactifs et dynamiques.\nCe module met également l’accent sur la gestion efficace des flux d’entrées et de sorties, en introduisant des notions telles que la lecture et l’écriture de fichiers. Les apprenants découvrent comment manipuler des données textuelles ou numériques pour répondre à des besoins spécifiques, tout en apprenant à gérer les erreurs potentielles liées à ces opérations. En s’appuyant sur des exemples concrets, ce module renforce la compréhension des mécanismes d’interaction entre un programme et son environnement, permettant ainsi de développer des applications plus robustes et polyvalentes. Ces compétences s’intègrent aux connaissances acquises dans les modules précédents, consolidant une approche pratique et structurée de la programmation.\n"},{"id":25,"href":"/inf1901-teluq/docs/modules/module4/travail-note-4/","title":"Travail noté 4","section":"Module 4: Les entrées et sorties","content":" "},{"id":26,"href":"/inf1901-teluq/docs/modules/module5/travail-note-5/","title":"Travail noté 5","section":"Module 5. La programmation orientée-objet: héritage et le polymorphisme","content":" "},{"id":27,"href":"/inf1901-teluq/docs/modules/module2/activite-2-4/","title":"Activité 2.4","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":28,"href":"/inf1901-teluq/docs/modules/module1/5-innovations-et-acteurs/","title":"Analyser et relier innovations et acteurs de l'IA dans le temps","section":"Module 1: Algorithme et pseudocode","content":" Analyser et relier innovations et acteurs de l\u0026rsquo;IA dans le temps # Présentation # Cette activité vise à vous habiliter à sélectionner, justifier et structurer des événements. Elle consiste à concevoir une ligne de temps commentée et, si possible interactive, qui croise phases, innovations et acteurs; le tout étant enrichi de commentaires sur ces items. Une ligne de temps interactive est une représentation visuelle dynamique dans le temps que l\u0026rsquo;on peut explorer, manipuler et enrichir contrairement à une ligne de temps statique.\nCette travail noté 1 vous permettra de visualiser l\u0026rsquo;évolution historique de l\u0026rsquo;IA, d\u0026rsquo;établir des liens entre scientifiques, innovations et contextes et, finalement, de stimuler l\u0026rsquo;analyse critique et la synthèse. Il compte pour 10 % de la note finale.\nDurée suggérée # De 7 à 10 heures\nÉtape par étape… # Avant de commencer à retourner à l\u0026rsquo;activité 2 S\u0026rsquo;informer, Étape par étape\u0026hellip;, étape 3 de ce module 1. Consultez également les conseils pratiques pour la préparation de ligne de temps[Lien s’ouvrant dans une autre page ou onglet.]. Construisez votre ligne de temps documentée interactive en suivant les étapes suivantes :\nStructurer la ligne de temps en phases clés. Organisez votre ligne de temps en 5 grandes phases de l\u0026rsquo;histoire de l\u0026rsquo;IA. Par exemple :\nLes origines de l\u0026rsquo;IA (années 1940-1950) L\u0026rsquo;émergence de l\u0026rsquo;apprentissage machine (machine learning) Les réseaux neuronaux et l\u0026rsquo;apprentissage profond (deep learning) L\u0026rsquo;avènement de l\u0026rsquo;IA Générative ((depuis 2017) Identifier les moments clés. Pour chaque phase, sélectionnez de 1 à 3 événements ou innovations majeurs, tels que :\nPublication d\u0026rsquo;un article fondateur Création d\u0026rsquo;n programme historique. Par exemple AlphoGo qui « est un programme informatique capable de jouer au jeu de go, développé par l\u0026rsquo;entreprise britannique DeepMind et racheté en 2014 par Google » (Wikipédia, AlphaGo) Progrès techniques (ex. : réseaux convolutifs) Applications concrètes Mettre en avant les acteurs et leurs contributions. Associez à chaque événement un ou plusieurs scientifiques ou ingénieurs :\nAlain Turing (test d\u0026rsquo;intelligence) Marvin Minsky (symbolisme) Yann Le Cun (réseaux convolutifs) Geoffrey Hinton (rétropropagation (backpropagation), apprentissage profond (deep learning) etc. Indiquez : Leur rôle Leur institution ou entreprise L\u0026rsquo;impact de leur contribution Rédiger des descriptions concises, mais informatives. Pour chaque éléments, fournissez :\nUne date ou période Un titre court Un texte explicatif (3 à 6 lignes) Des liens ou références (vidéo, article, document, etc.) Soignez l\u0026rsquo;interactivité et l\u0026rsquo;esthétique :\nUtilisez outil de ligne de temps chronologique interactive (TimeJS, Genially, Tiki-Toki, Padlet\u0026hellip;) Intégrez des éléments multimédias : images, vidéos, citations audio Choisissez une organisation claire et lisible Respectez un fil conducteur thématique Note : Ce travail de structuration par phases a été réalisé avec l\u0026rsquo;aide de ChatGPT (OpenIA), utilisé le 10 juin 2025.\nLe document produit comportera une première page ou un générique où les informations suivantes seront indiquées :\nURL de la ligne temps interactive (réalisée sur Genially, TimelineJS, Padlet, etc.) Version PDF statique de la ligne de temps incluant les contenus explicatifs Page de présentation (1 pages max avec : Titre du projet Nom(s) et matricule(s) Méthodologie de travail Bibliographie complète en format APA 7 Format de remise\nLe travail doit comprendre les éléments suivants : 5 phases historiques de l\u0026rsquo;évolution de l\u0026rsquo;IA. Chaque phase comprend : Période (ex. 1050-1060) Titre de la phase Résumé explicatif (3 à 5 lignes) 1 à 3 innovations majeures avec dates et descriptions 1 à 2 figures clés (nom, biographie courte, contribution(s)) Sources fiables citées (minimum 5) en format APA 7 Multimédias intégrés (images, vidéos, liens externes)\n"},{"id":29,"href":"/inf1901-teluq/docs/modules/module5/","title":"Module 5. La programmation orientée-objet: héritage et le polymorphisme","section":"Modules","content":" Module 5 # Le module 5 initie à la programmation orientée objet en explorant deux concepts fondamentaux : l’héritage et le polymorphisme. L’héritage permet de créer des classes dérivées qui réutilisent et étendent les propriétés et comportements de classes existantes, favorisant ainsi une conception modulaire et efficace du code. Le polymorphisme, quant à lui, offre la possibilité d’utiliser des objets de différentes classes de manière uniforme, en s’appuyant sur des interfaces ou des classes parentes. À travers des exemples pratiques issus du manuel Java pas à pas et du site du cours, ce module enseigne comment appliquer ces principes pour construire des programmes Java structurés, flexibles et maintenables.\nCe module met également en lumière l’importance de ces concepts dans la résolution de problèmes complexes. Les apprenants découvrent comment organiser le code en hiérarchies de classes pour modéliser des relations du monde réel, tout en utilisant le polymorphisme pour écrire des fonctions génériques et adaptables. Les exercices pratiques permettent de manipuler des classes abstraites, des interfaces et des méthodes surchargées, renforçant la compréhension des mécanismes de la programmation orientée objet. En s’appuyant sur les acquis des modules précédents, ce module consolide les compétences nécessaires pour concevoir des solutions logicielles robustes et évolutives, prêtes à répondre à des besoins variés.\n"},{"id":30,"href":"/inf1901-teluq/docs/ressources/","title":"Ressources","section":"Docs","content":" Ressources pour apprendre Java # Ce document regroupe des ressources variées pour apprendre Java, des livres aux tutoriels en ligne, en passant par des vidéos et des conseils pratiques. Il s’adresse aux débutants comme aux apprenants intermédiaires souhaitant approfondir leurs compétences en programmation.\nOuvrages de référence # Les livres suivants offrent une introduction ou un approfondissement en Java, adaptés à différents niveaux :\nClaude Delannoy, Programmer en Java, Eyrolles : un ouvrage complet pour les débutants et intermédiaires. Barry Burd, Java pour les nuls, 4e édition (environ 25 $) : une approche conviviale, idéale pour les novices. Cyrille Herby, Apprenez à programmer en Java (environ 11 $) : un manuel axé sur la programmation professionnelle. Documentation officielle # La documentation d’Oracle est une référence incontournable pour comprendre les bases et explorer les fonctionnalités avancées :\nTutoriel officiel d’Oracle (en anglais) : une introduction progressive aux concepts fondamentaux.\nhttps://docs.oracle.com/javase/tutorial/ API Java 8 : une documentation détaillée pour cette version stable et largement utilisée.\nhttps://docs.oracle.com/javase/8/docs/api/ API Java 24 : la version la plus récente, incluant les dernières évolutions du langage.\nhttps://docs.oracle.com/en/java/javase/24/docs/api/ Guides en ligne # Les ressources numériques gratuites permettent un apprentissage autonome et flexible :\nSébastien Combéfis, Apprendre Java et la programmation orientée objet : un cours structuré pour débutants.\nhttps://www.ukonline.be/cours/java/apprendre-java Programmation Java sur Wikibooks : un guide collaboratif couvrant les bases et des sujets avancés.\nhttps://fr.wikibooks.org/wiki/Programmation_Java Stack Overflow : une plateforme pour poser des questions ou trouver des solutions à des problèmes concrets.\nhttps://stackoverflow.com/ Vidéos pédagogiques # YouTube propose des séries en français pour apprendre Java de manière visuelle :\nCours d’introduction à Java par FormationVideo : une série appréciée pour son approche claire.\nhttps://www.youtube.com/playlist?list=PLrSOXFDHBtfHkq8dd3BbSaopVgRSYtgPv Apprendre le Java : une série complète pour découvrir les bases.\nhttps://www.youtube.com/playlist?list=PLMS9Cy4Enq5LKYxJmD1ZIu3C7f3vA00hM Tuto Java : des explications simples pour progresser rapidement.\nhttps://www.youtube.com/playlist?list=PLBNheBxhHLQxfJhoz193-dRwvc2rl8AOW Java apprendre à coder : une approche pratique pour les débutants.\nhttps://www.youtube.com/playlist?list=PLvWq8NyUnHacq2hJ7S4FKhaQGN3xotKb7 Programmer en Java : des vidéos détaillées pour approfondir ses compétences.\nhttps://www.youtube.com/playlist?list=PLlxQJeQRaKDRnvgIvfHTV6ZY8M2eurH95 Conseils pour apprendre efficacement # Aucune ressource unique ne suffit pour maîtriser la programmation. Voici une approche recommandée :\nCommencez par un livre ou un tutoriel adapté à votre niveau pour poser des bases solides. Consultez la documentation officielle pour des précisions techniques sur des points spécifiques. Utilisez les vidéos pour visualiser les concepts et clarifier les notions abstraites. Pratiquez régulièrement avec des exercices ou des petits projets pour ancrer vos connaissances. En cas de blocage, Stack Overflow ou les forums de cours peuvent fournir des solutions concrètes. L’apprentissage de la programmation suit un processus itératif. Revisitiez les mêmes notions à travers différentes ressources (livres, vidéos, guides) pour consolider votre compréhension. Explorez au-delà des ressources proposées, car la recherche autonome est essentielle pour progresser. Par exemple, un manuel ne peut remplacer la pratique, tout comme un tutoriel vidéo ne suffit pas sans exercices. Adoptez une approche variée et persévérante.\n"},{"id":31,"href":"/inf1901-teluq/docs/modules/module3/travail-note-3/","title":"Travail noté 3","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":32,"href":"/inf1901-teluq/docs/modules/module3/activite-3-4/","title":"Activité 3.4","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":33,"href":"/inf1901-teluq/docs/modules/examen/","title":"Examen","section":"Modules","content":" "},{"id":34,"href":"/inf1901-teluq/docs/modules/module2/exercices-2-2/","title":"Exercices 2.2","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":35,"href":"/inf1901-teluq/docs/modules/module1/6-test-sur-l-ia-decodee/","title":"Test sur l'intelligence artificielle décodée","section":"Module 1: Algorithme et pseudocode","content":" Test sur l\u0026rsquo;intelligence artificielle décodée # Ce test vise à évaluer votre compréhension des grands enjeux liés à l\u0026rsquo;IA abordés dans le documentaire L\u0026rsquo;intelligence artificielle décodée que vous avez visionné à l\u0026rsquo;activité 1 du module 1. Il permet de revenir sur les acteurs engagés dans le domaine, sur leur point de vue sur les aspects de l\u0026rsquo;IA traité dans le documentaire et et sur les enjeux éthique de l\u0026rsquo;IA tels qu\u0026rsquo;ils se posent aujourd\u0026rsquo;hui.\n"},{"id":36,"href":"/inf1901-teluq/docs/modules/module3/activite-3-5/","title":"Activité 3.5","section":"Module 3: Les structures de données, de contrôle et d'itération en Java","content":" "},{"id":37,"href":"/inf1901-teluq/docs/evaluation/","title":"Évaluation","section":"Docs","content":"Évaluation Ce cours compte 5 travaux notés à remettre au cours des 15 semaines et d'un examen final à réaliser à la fin du cours. Voici la grille de pondération des travaux :\nÉvaluations Sujets Travail Noté #1 Les algorithmes Travail Noté #2 Types, opérateurs et méthodes Travail Noté #3 Structures de contrôle, itérations et données Travail Noté #4 Les flux d'entrée et de sortie Travail Noté #5 Héritage et polymorphismes Examen L'ensemble du cours Avant de faire les travaux, il faut avoir fait les lectures et les exercices de préparation. Essayez d'aller directement aux travaux notés est une stratégie perdante pour la plupart des étudiants. Prenez le temps d'étudier la matière! Dans tous les cas, vous devez expliquer vos solutions. Les travaux notés sont des travaux individuels. Vous devez les réaliser seul. Le professeur ne donne pas d'indice, à quiconque: il est inutile d'en demander. "},{"id":38,"href":"/inf1901-teluq/docs/modules/module2/travail-note-2/","title":"Travail noté 2","section":"Module 2: Introduction à l'apprentissage machine","content":" "},{"id":39,"href":"/inf1901-teluq/docs/faq/","title":"FAQ","section":"Docs","content":" Question: Qu\u0026rsquo;est-ce que Java et pourquoi est-il utilisé ? # Réponse: Java est un langage de programmation orienté objet, populaire pour sa portabilité et sa robustesse. Il est utilisé pour développer des applications web, mobiles (comme Android), des logiciels d\u0026rsquo;entreprise et des jeux, car il fonctionne sur de nombreuses plateformes grâce à la machine virtuelle Java (JVM).\nQuestion: Comment installer Java sur mon ordinateur ? # Réponse: Pour installer Java, téléchargez le JDK (Java Development Kit) depuis le site officiel d\u0026rsquo;Oracle ou adoptez une version open-source comme OpenJDK. Suivez les instructions d\u0026rsquo;installation pour votre système (Windows, macOS ou Linux). Vérifiez l\u0026rsquo;installation en tapant java -version dans une invite de commande.\nQuestion: Quelle est la différence entre JDK, JRE et JVM ? # Réponse: Le JDK (Java Development Kit) inclut des outils pour développer des programmes Java. Le JRE (Java Runtime Environment) permet d\u0026rsquo;exécuter des applications Java. La JVM (Java Virtual Machine) est le moteur qui exécute le code Java compilé, inclus dans le JRE.\nQuestion: Pourquoi dois-je écrire public static void main dans mon programme ? # Réponse: La méthode public static void main(String[] args) est le point d\u0026rsquo;entrée d\u0026rsquo;un programme Java. Elle est requise pour que la JVM sache où commencer l\u0026rsquo;exécution. public la rend accessible, static permet de l\u0026rsquo;appeler sans créer d\u0026rsquo;objet, et void indique qu\u0026rsquo;elle ne retourne rien.\nQuestion: Qu\u0026rsquo;est-ce qu\u0026rsquo;une variable en Java et comment la déclarer ? # Réponse: Une variable stocke des données, comme des nombres ou du texte. Pour la déclarer, indiquez son type, son nom et, optionnellement, une valeur initiale, par exemple : int nombre = 10; pour un entier ou String texte = \u0026quot;Bonjour\u0026quot;; pour du texte.\nQuestion: Comment afficher du texte dans la console en Java ? # Réponse: Utilisez la méthode System.out.println() pour afficher du texte dans la console. Par exemple, System.out.println(\u0026quot;Bonjour le monde !\u0026quot;); affiche \u0026ldquo;Bonjour le monde !\u0026rdquo; suivi d\u0026rsquo;un saut de ligne.\nQuestion: Qu\u0026rsquo;est-ce qu\u0026rsquo;une boucle en Java et à quoi sert-elle ? # Réponse: Une boucle exécute un bloc de code plusieurs fois. Par exemple, une boucle for comme for (int i = 0; i \u0026lt; 5; i++) { System.out.println(i); } affiche les nombres de 0 à 4. Les boucles sont utiles pour répéter des tâches, comme parcourir une liste.\nQuestion: C\u0026rsquo;est quoi une classe et un objet en Java ? # Réponse: Une classe est un modèle définissant des propriétés (attributs) et des comportements (méthodes). Un objet est une instance de cette classe. Par exemple, une classe Voiture peut définir une couleur et une méthode pour conduire, et un objet maVoiture est une voiture spécifique créée à partir de cette classe.\nQuestion: Pourquoi vois-je une erreur \u0026ldquo;NullPointerException\u0026rdquo; ? # Réponse: Une NullPointerException se produit quand vous essayez d\u0026rsquo;utiliser une variable ou un objet qui n\u0026rsquo;a pas été initialisé (sa valeur est null). Vérifiez si vous avez bien créé l\u0026rsquo;objet avec new ou si la variable a une valeur avant de l\u0026rsquo;utiliser.\nQuestion: Comment lire une entrée utilisateur en Java ? # Réponse: Utilisez la classe Scanner pour lire une entrée. Par exemple :\nimport java.util.Scanner; Scanner scanner = new Scanner(System.in); System.out.println(\u0026#34;Entrez votre nom : \u0026#34;); String nom = scanner.nextLine(); Cela lit une ligne de texte entrée par l\u0026rsquo;utilisateur et la stocke dans la variable nom.\nQuestion: Pourquoi est-ce que le cours ne s\u0026rsquo;offre pas en vidéoconférence ? # Réponse: Nous nous ferons un plaisir de répondre à vos questions par courriel, mais nous n\u0026rsquo;offrons pas d\u0026rsquo;enseignement par vidéoconférence au sein du cours INF 1220. La plupart des universités québécoises ont offert des cours d\u0026rsquo;informatique en vidéoconférence (zoom, etc.) lors de la grande pandémie de 2020-2021. L\u0026rsquo;Université Laval offre plusieurs cours selon ce modèle. Ce n\u0026rsquo;est pas le modèle de l\u0026rsquo;Université TÉLUQ. La plupart de nos étudiants ne souhaitent pas se présenter à heure fixe pour une session de cours de trois heures en vidéoconférence. Il est indéniable que l\u0026rsquo;enseignement par vidéoconférence répond bien aux besoins de certains étudiants, mais il est déjà offert ailleurs et nous ne croyons pas qu\u0026rsquo;il répond aux besoins de nos étudiants.\nQuestion: J\u0026rsquo;ai remis ma solution sans explication. Ma solution était correcte, mais j\u0026rsquo;ai quand même obtenu zéro, est-ce normal ? # Réponse: Oui, vous devez expliquer vos solutions.\nQuestion: J\u0026rsquo;ai terminé l\u0026rsquo;examen et je suis déçu de ma note. Est-ce que je peux avoir une explication de mon résultat ? # Réponse: Oui, suivez les consignes fournies par l\u0026rsquo;Université. Le professeur ne va pas transmettre la correction, vous devez passer par les moyens sécurisés de l\u0026rsquo;Université.\nQuestion: Ma date de fin de cours était hier, et aujourd\u0026rsquo;hui, je n\u0026rsquo;arrive pas à déposer mon travail noté. Est-ce que je peux le transmettre par courriel ? # Réponse: Non. Si la date de fin de cours est passée, il est normal que vous ne puissiez pas déposer votre travail. Vous obtiendrez la note de zéro.\nQuestion: Il m\u0026rsquo;a fallu des heures pour compléter le module X et remettre le travail noté, est-ce normal ? # Réponse: Absolument. Il faut prévoir des dizaines d\u0026rsquo;heures par module (et donc par travail noté). Prévoyez entre 5 et 15 heures par semaine pendant 15 semaines pour compléter le cours.\nQuestion: Mon examen est dans trois mois, mais la date de fin de cours officiel est dans une semaine. Est-ce que cela signifie que j\u0026rsquo;ai trois mois supplémentaires pour remettre mes travaux ? # Réponse: Non. Tout travail remis après votre date de fin de cours peut recevoir la note de zéro.\nQuestion: Je n\u0026rsquo;ai pas reçu de lettre confirmant mon inscription au cours ? # Réponse: Dans ce cas, vous n\u0026rsquo;êtes pas reconnu comme étant inscrit au cours. Vérifiez auprès de l\u0026rsquo;Université. Vous devez avoir reçu une confirmation écrite concernant votre inscription. Bien que vous les receviez directement, les documents officiels sont aussi disponibles en cliquant sur l’onglet « Documents reçus » au sein du tableau de bord du portail étudiant.\nQuestion: J\u0026rsquo;ai besoin de plus de temps que prévu pour terminer le cours, on m\u0026rsquo;a dit que le professeur pouvait m\u0026rsquo;arranger ? # Réponse: Non. La date de fin de cours ainsi que le moment où votre dossier est fermé sont déterminés par l\u0026rsquo;Université et non pas par le professeur.\nQuestion: J\u0026rsquo;ai été très malade et j\u0026rsquo;ai pris du retard, est-ce que vous pouvez me donner plus de temps ? # Réponse: Non. La date de fin de cours ainsi que le moment où votre dossier est fermé sont déterminés par l\u0026rsquo;Université et non pas par le professeur.\nQuestion: Combien de temps faut-il investir dans ce cours ? # Réponse: Le temps nécessaire dépend de votre préparation individuelle, mais vous devriez prévoir environ 9 heures par semaine pendant quinze semaines. Les étudiants qui ont déjà de l\u0026rsquo;expérience en programmation peuvent aller beaucoup plus rapidement.\nQuestion: J\u0026rsquo;ai eu des difficultés personnelles, j\u0026rsquo;ai manqué de temps, est-ce que le professeur peut modifier ma date de fin de cours ? # Réponse: Non. Le professeur ne peut modifier votre date de fin de cours. Si vous devez reporter votre date de fin de cours, vous devez joindre l\u0026rsquo;Université.\nQuestion: J\u0026rsquo;ai du mal avec une question dans un des travaux, est-ce que je peux avoir un indice, une partie de la solution ? # Réponse: Non. Le professeur se fera un plaisir de répondre aux questions ayant trait à la matière, mais les travaux notés sont des travaux individuels. Assurez-vous de bien compléter les exercices et les lectures avant d\u0026rsquo;entreprendre les travaux notés.\nQuestion: Je dois passer l\u0026rsquo;examen le X, mais j\u0026rsquo;ai un empêchement, est-ce que vous pouvez déplacer l\u0026rsquo;examen ? # Réponse: Non. Le professeur ne gère pas le déroulement de l\u0026rsquo;examen. Vous devez joindre l\u0026rsquo;Université.\nQuestion: Je viens de passer 35 heures sur la question X du travail noté Y, est-ce que vous pouvez me donner un indice ? # Réponse: Non. Ce serait inéquitable. Nous avons un grand volume d\u0026rsquo;étudiants avec un bon taux de succès (de bonnes notes) : nous savons donc que les travaux notés ne sont pas trop difficiles. Par contre, il arrive souvent que les étudiants ne fassent pas correctement tous les exercices et toutes les lectures préparatoires, croyant à tort qu\u0026rsquo;ils gagneront du temps en allant directement au travail noté. D\u0026rsquo;autres étudiants n\u0026rsquo;ont tout simplement pas la préparation suffisante : la programmation est un langage formel qui est difficile pour ceux qui n\u0026rsquo;ont pas acquis les bases en mathématiques.\nCeci étant dit, il est parfaitement normal de passer 35 heures sur un des modules. Il faut prévoir un total d\u0026rsquo;environ 135 heures (en moyenne) pour compléter le cours. Certains étudiants peuvent aller plus rapidement. Si vous partez de plus loin et qu\u0026rsquo;il vous manque des préalables (par exemple, mathématiques), il faut prévoir un peu plus de temps.\n"},{"id":40,"href":"/inf1901-teluq/docs/math/","title":"Rappel mathématique","section":"Docs","content":" 1. Les propositions, les ensembles, les relations et les nombres. Avant de commencer, il est conseillé, pour se familariser avec certaines notations, de jeter un coup d'oeil sur le tableau des symboles et abréviations usuels. 1.1. Les propositions Une proposition mathématique est un énoncé dont on peut dire sans ambiguïté si elle est vraie ou si elle fausse. Le processus qui consiste à déterminer si une proposition mathématique est vraie ou fausse est l\u0026#x2019;objet du calcul propositionnel ou calcul des propositions et fait partie de la logique mathématique. Le résultat d\u0026#x2019;un calcul propositionnel est donc l\u0026#x2019;attribution d\u0026#x2019;une valeur de vérité à une proposition.\nAinsi, l'énoncé « Le cours INF1220 figure parmi les cours dispensés à la TELUQ au trimestre d\u0026#x2019;hiver 2021 » est une proposition mathématique et sa valeur de vérité est « vrai ». la proposition «Le cours INF1220 est mon meilleur cours » n'est pas une proposition mathématique. Dans notre contexte, quand nous parlons de proposition, nous parlons de proposition mathématique.\n1.1.1. Table des valeurs de vérités des propositions Tableau 1: Table de vérités et connecteurs logiques p q non p p ou (inclusif) q p ou (exclusif) q p et q p⇒q (p implique q) p⇔q (p équivaut à q) V V F V F V V V V F F V V F F F F V V V V F V F F F V F F F V V 1.2. Les ensembles Un ensemble est une collection d\u0026#x2019;objets. Si on appelle E cette collection, alors pour chacun de ces objets, on peut affirmer qu\u0026#x2019;il appartient à E.\nOn peut déterminer E en énumérant ses éléments, par exemple E={ o 1 , o 2 ,\u0026#x2026;} où o i est un des objets de la collection (et où on admet que pour tout objet de la collection, il y a un o i qui lui soit identique). On dit alors qu\u0026#x2019;on a défini E en extension.\nUn objet o i est appelé un élément de E. On note o i \u0026#x2208;E.\nÉtant donné un objet arbitraire, c\u0026#x2019;est-à-dire une chose quelconque, on est capable de dire si oui ou non cette chose appartient à E. si nous notons la chose en question o et qu\u0026#x2019;elle n\u0026#x2019;appartient pas à E, nous traduisons cela par o\u0026#x2209;E. Une autre façon de déterminer un ensemble est de donner une propriété qui caractérise ses éléments. Par exemple, la collection de toutes les personnes qui sont inscrites à la TELUQ pour suivre le cours INF1220 pour le trimestre d\u0026#x2019;hiver 2021 à la date du 1er mars 2021 est un ensemble. Nous pouvons le noter T. on convient dans ce cas d\u0026#x2019;écrire T={o\u0026#x2215;o est inscrit à la TELUQ pour suivre le cours INF1220 pour le trimestre d\u0026#x2019;hiver 2021 à la date du 1er mars 2021}. Le symbole / (ou |) se lit « tel que ». « être inscrit à la TELUQ pour suivre le cours INF1220 pour le trimestre d\u0026#x2019;hiver 2021 à la date du 1er mars 2021 » est la propriété caractéristique de l\u0026#x2019;ensemble T (ou des éléments de cet ensemble).\nLes nombres entiers positifs forment un ensemble ; c\u0026#x2019;est l\u0026#x2019;ensemble des entiers naturels. On le note N. N={0,1,\u0026#x2026;..}\nUn ensemble peut être fini, comme l\u0026#x2019;ensemble T. Un ensemble peut être infini, comme l\u0026#x2019;ensemble N. On admet qu\u0026#x2019;il existe un ensemble qui ne contient aucun élément. On appelle cet ensemble, ensemble vide. On le note couramment {} ou \u0026#x2205;. Un singleton est un ensemble qui a un seul élément. On admet aussi que si l\u0026#x2019;on ajoute un élément d\u0026#x2019;un ensemble E à ce même ensemble E, on ne change par l\u0026#x2019;ensemble E. On considère de ce fait, qu\u0026#x2019;un ensemble est donné par une collection distincte des objets qui le constituent, c\u0026#x2019;est-à-dire que ses éléments sont distincts. Le nombre des éléments d\u0026#x2019;un ensemble est appelé le cardinal de cet ensemble. Le cardinal de l\u0026#x2019;ensemble vide est par définition 0.\nDeux ensembles sont égaux s\u0026#x2019;ils ont exactement les mêmes éléments ou si on peut prouver qu\u0026#x2019;ils ont exactement les mêmes éléments. Par l\u0026#x2019;exemple, V={o/o est inscrit à la TELUQ pour suivre le cours INF1220 pour le trimestre d\u0026#x2019;hiver 2022 à la date du 1er mars 2021} est un ensemble vide. En effet, il n\u0026#x2019;y a aucune inscription pour le cours INF1220 à la TELUQ à cette date. Cependant, dire que cet ensemble est vide ne signifie pas qu\u0026#x2019;il n\u0026#x2019;existe pas. Il existe, mais il n\u0026#x2019;a aucun élément. V={}.\n1.2.1. Opération sur les ensembles Soient deux ensembles A et B.\nL\u0026#x2019;intersection de A et B est un ensemble formé par les éléments qui appartiennent à la fois à A et à B. On le note A\u0026#x2229;B.\nLa réunion de A et de B est un ensemble formé par les éléments qui appartiennent à A ou qui appartiennent à B. On le note A\u0026#x222a;B.\nLa différence symétrique est un ensemble formé par les éléments de A qui n\u0026#x2019;appartiennent pas à B . On le note A\u0026#x2216;B.\nLe produit cartésien de A et de B est un ensemble formé de couples (a,b) tels que a\u0026#x2208;A et b\u0026#x2208;B. On le note A×B.\n1.3. Relation binaire Une relation binaire R est un ensemble défini par la donnée de deux ensembles A et B et d\u0026#x2019;une règle qui permet d\u0026#x2019;associer certains éléments de A à certains éléments de B. R est un sous ensemble du produit cartésien A×B de A et de B. La règle associée à une relation est aussi appelée lien verbal. Le lien verbal est une proposition. On peut définir une relation en compréhension par R={(a,b)\u0026#x2208; A×B/ le lien verbal soit vérifié pour a et b}. Au lieu de noter (a,b)\u0026#x2208;R, on note simplement aRb et on lit a en relation avec b. b est l\u0026#x2019;image de a par la relation R et a est l\u0026#x2019;antécédent de b pour la relation R.\n1.3.1. Propriété d\u0026#x2019;une relation binaire Soit R une relation binaire. Lorsque les ensembles de départ et d\u0026#x2019;arrivée sont identiques, c\u0026#x2019;est-à-dire tous égaux à A, on dit simplement que R est une relation définie sur A.\nSoit A un ensemble et R une relation binaire définie sur A. R peut avoir les propriétés suivantes :\n1.3.1.1. Reflexivité Soit A un ensemble et R une relation définie sur A.\nR est réflexive si \u0026#x2200;a\u0026#x2208;A, aRa.\nExemple : la relation de divisibilité R dans N (aRb ssi a divise b) est réflexive. Question : donnez un autre exemple de relation réflexive.\nRéponse La relation d'ordre naturel R sur N définie par aRb ssi a inférieur ou égal à b est réflexive.\n1.3.1.2. Symétrie R est symétrique ssi \u0026#x2200;a\u0026#x2208;A, \u0026#x2200;b\u0026#x2208;B, aRb\u0026#x21d2;bRa.\nExemple : soit m\u0026#x2208;N* . La relation R définie sur N par aRb ssi a et b ont le même reste dans la division euclidienne par m est symétrique.\n1.3.1.3. Transitivité R est transitive ssi pour a, b, c \u0026#x2208;A, aRb et bRc \u0026#x21d2; aRc. La relation d\u0026#x2019;ordre naturel sur N est transitive. Question: Donner un autre exemple de relation transitive.\nRéponse La relation de divisibilité R dans N définie par aRb ssi a divise b est transitive.\n1.3.1.4. Antisymétrie R est antisymétrique ssi pour a, b \u0026#x2208; A, aRb et bRa \u0026#x21d2; a=b. par exemple soit E un ensemble, et P(E) l\u0026#x2019;ensemble des parties de E. La relation \u0026#x2286; sur P(E) (définie par A en relation avec B ssi A\u0026#x2286;B) est une relation antisymétrique. Question: Donnez un autre exemple de relation antisymétrique.\nRéponse La relation R de divisibilité dans N définie par aRb ssi a divise b est antisymétrique.\n1.3.2. Relation d\u0026#x2019;équivalence Soit R une relation définie sur un ensemble A. R est une relation d\u0026#x2019;équivalence si R est à la fois réflexive, symétrique et transitive. Soit m\u0026#x2208;N*. La relation R définie sur Z par aRb ssi a et b ont le même reste dans la division euclidienne par m est une relation d\u0026#x2019;équivalence.\n1.3.3. Relation d\u0026#x2019;ordre Soit R une relation définie sur un ensemble A. R est une relation d\u0026#x2019;ordre ssi elle est à la fois réflexive, transitive et antisymétrique.\nPar exemple soit E un ensemble, et P(E) l\u0026#x2019;ensemble des parties de E. La relation \u0026#x2286; sur P(E) est une relation d'ordre.\nSoit R une relation d\u0026#x2019;ordre sur A, a et b sont comparable ssi aRb ou bRa. Si \u0026#x2200; a, b \u0026#x2208;A ; a et b sont toujours comparables, on dit que R est une relation d\u0026#x2019;ordre total. S\u0026#x2019;il existe a, b tels que a et b ne sont pas comparables, R est une relation d\u0026#x2019;ordre partiel. Exemple, la relation définie sur Z par aRb si a divise b (division euclidienne) est une relation d\u0026#x2019;ordre partiel car on ne peut pas comparer 2 et 5. Question: Donner un autre exemple de relation d\u0026#x2019;ordre partiel.\nRéponse Si E est un ensemble ayant au moins deux éléments a et b, la relation \u0026#x2286; sur P(E) (définie par A en relation avec B ssi A\u0026#x2286;B) est une relation d'ordre partiel car {a} et {b} sont deux éléments de P(E) qui ne sont pas comparables par \u0026#x2286;.\nLa relation d\u0026#x2019;ordre définie sur Z par aRb si a inférieur ou égal à b est une relation d\u0026#x2019;ordre total.\nUne fonction est une relation où chaque élément de l\u0026#x2019;ensemble de départ a au plus une image dans l\u0026#x2019;ensemble d\u0026#x2019;arrivée. Dans ce cas, si A est l\u0026#x2019;ensemble de départ, B l\u0026#x2019;ensemble d\u0026#x2019;arrivée, et si on note f la relation, on appelle domaine de f (noté Dom(f) ou simplement Df) l\u0026#x2019;ensemble des éléments de A ayant une image par f. De même on appelle image de f et on note Im(f) l\u0026#x2019;ensemble des éléments de B ayant au moins un antécédent dans A.\n1.3.3.1. Ordre lexicographique Soit V un ensemble de symboles et L un ensemble défini par :\nsi v\u0026#x2208;V, alors v\u0026#x2208;L;\nsi l\u0026#x2208;L et e\u0026#x2208;L alors el et le appartiennent à L. V est appelé vocabulaire et L est l\u0026#x2019;ensemble des mots construits sur ce vocabulaire. Un mot l de L s\u0026#x2019;écrit v n ,\u0026#x2026;, v 0 , où v i \u0026#x2208;V. On peut remarquer que si V est l\u0026#x2019;ensemble des 26 lettre de l\u0026#x2019;alphabet française, alors L est l\u0026#x2019;ensemble des mots possibles de la langue française (si on assimile toutes les voyelles accentuées à leur équivalent non accentué, c\u0026#x2019;est-à-dire qu\u0026#x2019;on laisse tomber les accents) ; en fait L contient tous les mots de la langue française, mais aussi des choses comme rrrrrrrrr sont des mots de\u0026nbsp;L.\nQuestion: Que vaut L si V est l\u0026#x2019;ensemble des chiffres de 0 à 9 ?\nRéponse Voir plus bas.\nOn suppose que V est muni d\u0026#x2019;une relation d\u0026#x2019;ordre total notée \u0026#x2264; (avec l'ordre strict noté \u0026lt;). Soit a et b deux éléments de L tels que a= a m ,\u0026#x2026;, a 0 et b= b n ,\u0026#x2026;, b 0 . \u0026#x2200;i\u0026#x2208;N, a i , b i \u0026#x2208;V. On pose p=min(m,n) le plus petit des deux entiers m et n. On définit sur L la relation R par aRb ssi ( a m \u0026lt; b n ) ou ( a m = b n et a m \u0026#x2212; 1 \u0026lt; b n \u0026#x2212; 1 ) ou ( a m = b n et a m \u0026#x2212; 1 = b n \u0026#x2212; 1 et a m \u0026#x2212; 2 \u0026lt; b n \u0026#x2212; 2 ) ou \u0026#x2026;ou ( a m = b n et a m \u0026#x2212; 1 = b n \u0026#x2212; 1 et \u0026#x2026;et a m \u0026#x2212; p + 1 = b n \u0026#x2212; p + 1 et a m \u0026#x2212;p \u0026lt; b n \u0026#x2212; p ) ou ( a m = b n et a m \u0026#x2212; 1 = b n \u0026#x2212; 1 et \u0026#x2026; et a 0 = b n \u0026#x2212; m si m \u0026#x2264; n).\nR est une relation d\u0026#x2019;ordre totale sur L. R qui est aussi notée \u0026#x2264; et prolonge la relation \u0026#x2264; de V est appelée l\u0026#x2019;ordre lexicographique sur L.\nSi V est l'ensemble des chiffres de 0 à 9, l'ensemble L contient l'ensemble des entiers naturels N. Il faut remarquer que sur cet ensemble L ordonné par \u0026#x2264;, 0 est différent par exemple de 00, ce qui n'est pas le cas dans l'ensemble N muni de la relation d'ordre \"naturelle\" (la relation inférieure ou égale). 1.4. L\u0026#x2019;ensemble des entiers naturels N et les autres ensembles de nombre. Il faut noter que les entiers naturels forment un ensemble particuliers. Pour illustrer le lien étroit qu\u0026#x2019;il y a entre la théorie des ensembles et les entiers naturels, il faut savoir qu\u0026#x2019;on peut construire l'ensemble des entiers naturels en procédant comme suit : 0=\u0026#x2205;, 1=successeur de 0, c'est à dire 1={0}, 2=successeur de 1, c'est à dire 2={0,1}, etc.\nCommençons par voir de façon générale les lois de composition sur un ensemble.\n1.4.1. Lois de composition dans un ensemble Soit E et G deux ensembles. Une loi de composition T dans l\u0026#x2019;ensemble E est une fonction de E×E vers G qui à tout couple ( a, b) d'éléments de E associe un unique élément c de G tel que c=aTb.\nSoit E un ensemble muni d'une loi T.\n1.4.1.1. Ensemble stable par une loi Si \u0026#x2200;a,b\u0026#x2208;E, a T b \u0026#x2208; E, alors la loi T est interne sur E. On dit aussi que E est stable par la loi T. On note (E,T) pour signifier que E est muni de la loi interne T.\nPar exemple l\u0026#x2019;addition est interne à l\u0026#x2019;ensemble des entiers naturels N.\n1.4.1.2. Élément neutre pour une loi Un élément e de E est un élément neutre pour T ssi pour tout élément a de E , aTe=eTa=a\nExemples\u0026nbsp;: 0 est l'élément neutre pour l'addition + sur l'ensemble N des entiers naturels : Pour tout entier naturel n, on a n+0=0+n=n.\nIl en est de même pour 1 qui est l'élément neutre pour la multiplication × sur l'ensemble N des entiers naturels : Pour tout entier naturel n, on a n×1=1×n=n.\nQuestion: Existe t-il un élément neutre pour la division ÷ sur l'ensemble N des entiers naturels?\nRéponse Non car malgré que pour tout n élément de N on ait n÷1=n, on n'a 1÷n=n que si n vaut 1.\nSoit (E,T) un ensemble E muni d\u0026#x2019;une loin interne T.\nOn a les propriétés suivantes :\n1.4.1.3. Associacitivité La loi T est associative si pour tous éléments a , b et c de E, (a T b) \u0026#x22a4; c = a \u0026#x22a4;( b\u0026#x22a4; c)=a \u0026#x22a4;b\u0026#x22a4; c\nExemple\u0026nbsp;: l'addition + est associative sur N.\n1.4.1.4. Commutativité La loi \u0026#x22a4; est commutative si pour tous éléments a et b de E, a \u0026#x22a4; b = b \u0026#x22a4; a.\nExemple\u0026nbsp;: l'addition + est commutative sur N.\n1.4.1.5. Symétrie Deux éléments a et b sont symétriques pour \u0026#x22a4; si a \u0026#x22a4; b = b \u0026#x22a4; a = e ( e étant l'élément neutre de E pour la loi \u0026#x22a4;). Si tout élément de e admet un symétrique pour la loi \u0026#x22a4;, on dit que la loi \u0026#x22a4; est symétrisable.\n1.4.1.6. Distributivité \u0026#x22a4; est distributive à gauche par rapport à une autre loi\u0026#x22a5; si pour tous éléments a, b, c de E, a \u0026#x22a4; (b \u0026#x22a5; c) = (a \u0026#x22a4; b )\u0026#x22a5;( a\u0026#x22a4; c)\n\u0026#x22a4; est distributive à droite par rapport à une autre loi \u0026#x22a5; si pour tous élément a, b, c de E, (b \u0026#x22a5; c) \u0026#x22a4;a = (b \u0026#x22a4;a) \u0026#x22a5;( c\u0026#x22a4; a)\n\u0026#x22a4; distributive pour \u0026#x22a5; si et seulement si elle est distributive à gauche et à droite par rapport à \u0026#x22a5;.\nLa multiplication × dans N est distributive par rapport à l'addition + dans N.\nDans la suite, on appellera opération les lois de composition dans l\u0026#x2019;ensemble N des entiers naturels. On note N* l\u0026#x2019;ensemble N privée du singleton {0}. N*=N\u0026#x2216;{0}\nL\u0026#x2019;addition + et la multiplication × usuelles sont des opérations internes sur N. c\u0026#x2019;est-à-dire que N est stable par chacune de ces opérations.\nLa soustraction \u0026#x2212; et la division ÷ usuelles ne sont pas des opérations internes dans N. C\u0026#x2019;est le besoin d\u0026#x2019;avoir des ensembles stables pour ces opérations qui ont guidé le développement de nouveaux ensembles de nombres. Ainsi, l\u0026#x2019;ensemble des entiers rationnels (termes que nous privilégions à entiers relatifs) Z est construit par symétrisation de N; c\u0026#x2019;est-à-dire que Z est construit de telle sorte que le symétrique par + d\u0026#x2019;un entier naturel n soit dans Z. Q l\u0026#x2019;ensemble des nombres rationnels est construit sur la base d\u0026#x2019;une relation d\u0026#x2019;équivalence définie sur Z par (a,b)R(c,d) ssi a×d=b×c ; on note a\u0026#x2044;b=c\u0026#x2044;d. De façon générale, si x et y sont deux entiers rationnels, x\u0026#x2044;y défini un nombre rationnel si y\u0026#x2260;0; x est le numérateur et y est le dénominateur.\nSoit x\u0026#x2044;y un nombre rationnel. Si x/y peut s\u0026#x2019;écrire sous la forme a\u0026#x2044;b où a est un entier rationnel et b une puissance de 10 (\u0026#x2203;k\u0026#x2208;N tel que b= 10 k ), alors x/y est un nombre décimal. On note D l'ensemble des nombres décimaux.\nDisposant de Q, on peut construire l\u0026#x2019;ensemble des nombres réels en utilisant les coupures de Q, notion due à Cantor et Dedeking. Par exemple soit C1=Q-\u0026#x222a;{a\u0026#x2208;Q+*. a 2 \u0026lt;2} et C2={a\u0026#x2208;Q+*. a 2 \u0026gt;2}. C1 et C2 sont deux coupures de Q qui définissent le nombre 2 . 2 \u0026#x2209;Q et 2 \u0026#x2208;R. On peut, avec cette méthode de coupure, définir n'importe quel nombre réel. On pose souvent I=R\u0026#x2216;Q. On a les inclusions suivante : N\u0026#x2282;Z\u0026#x2282;D\u0026#x2282;Q\u0026#x2282;R.\nSoit a\u0026#x2208;Z et b\u0026#x2208;Z*. Il existe un unique couple d\u0026#x2019;entier rationnels (q, r)\u0026#x2208;ZxN tel que a=b×q+r avec 0\u0026#x2264;r\u0026lt;|b|. On dit dans ces conditions que q est le quotient et r est le reste de la division euclidienne de a par b; a est le dividende et b est le diviseur. On peut restreindre cette définition à N en remplaçant Z par N. On parle alors de division euclidienne dans N. On dit que b divise a ou que b est un diviseur de a lorsque r vaut 0.\n1.4.1.6.1. Nombre pair / impair. Soit n\u0026#x2208;Z. n est un nombre pair ssi n est divisible par 2. 0 est un nombre pair. Un nombre qui n'est pas pair est impair. On note parfois 2Z (respectivement 2Z+1) l'ensemble des nombres entiers rationnels pairs (respectivement impairs).\nRemarques : si on remplace dans cette définition Z par N, alors on obtient qu\u0026#x2019;un entier naturel n\u0026#x2208;N est pair ssi n est divisible par 2. Les entiers naturels pairs sont ceux dont le chiffre des unités est pair. Les entiers naturels impairs sont ceux dont le chiffre des unités est impair.\n1.4.1.6.2. Nombre premier. Soit n\u0026#x2208;Z. n est un nombre premier ssi n a exactement quatre diviseurs : -1,1, -n et n. 0 et 1 ne sont pas des nombres premiers. 2 est un nombre premier.\nRemarque : si on remplace dans cette définition Z par N, alors on obtient qu\u0026#x2019;un entier naturel n\u0026#x2208;N est premier ssi n a exactement deux diviseurs : 1 et n.\n1.4.1.6.3. Grammaire du nombre. Soit VN={0,1,2,3,4,5,6,7,8,9}. On peut générer les entiers naturels selon la règle suivante :\nTout élément de VN est un nombre entier naturel.\nSi a et b sont des nombres entiers naturels, alors ab est un nombre entier naturel si a\u0026#x2260;0.\nLes éléments de VN sont aussi appelés les chiffres.\nVZ=VN\u0026#x222a;{-,+}\nTout entier naturel est un entier rationnel.\nSi a est un entier naturel, \u0026#x2212;a et +a sont des entiers rationnels\nVQ=VZ\u0026#x222a;{\u0026#x2044; ,,}\nTout entier rationnel est un nombre rationnel.\nSi a et b sont des entiers rationnels a,b est un nombre rationnel ; de plus si b\u0026#x2260;0, a b est un nombre rationnel.\nSi a et b sont des nombres rationnels, a b est aussi un nombre rationnel si b\u0026#x2260;0.\nLes opérations + et × sont associatives et commutatives. Les opérations × et ÷ sont distributives par rapport aux opérations \u0026#x2013; et +.\nLors de la simplification des expressions algébriques, il faut aller de la gauche vers la droite, et en calculant d\u0026#x2019;abord toutes les expressions entre parenthèse () ou tout autre signe qui tient lieu de parenthèses (ça peut être des crochets [ ] ou plus rarement des accolades {}). Les parenthèses ont donc toujours la plus grande priorité. Le tableau ci-dessous donne les régles de priorité.\nRègles de priorité Opérations Abréviations 1. L’intérieur des parenthèses doit être calculé. Lorsqu’il y a parenthèses, crochets et accolades, il faut simplifier prioritairement l’opération en débutant par les parenthèses intérieures : solutionner de l’intérieur vers l’extérieur. Parenthèses (ou assimilées) P 2. Les nombres affectés d’exposants doivent être évalués. Exponentiation E 3. Les divisions et les multiplications doivent être calculées. Ces deux opérations ont la même priorité. Elles sont évaluées dans l’ordre où elles apparaissent dans l’expression numérique établie, en se référant à la convention d’écriture indiquée plus loin. Divisions\nMultiplications D\nM 4. Finalement, les additions et les soustractions doivent être calculées. Ces deux opérations ont la même priorité. Elles sont évaluées à partir de la gauche de l’expression numérique en allant vers la droite (convention d’écriture). Additions\nSoustractions A\nS On peut se rappeler cet ordre de priorité avec l'acronyme mnémonique PEDMAS.\nDans l'ensemble R des nombres réels, deux éléments de R symétriques pour l'addition sont plus communément appelés opposés . Pour la multiplication on parle d'inverses.\n\u0026#x2003;\n2. Notion de variables et fonctions élémentaires sur les nombres 2.1. La notion de variable Soit E et F deux ensembles, f une fonction de E vers F. En général, f est donnée par une expression qui permet de déterminer l\u0026#x2019;image d\u0026#x2019;un élément e quelconque de E. Cela se fait en remplaçant dans l\u0026#x2019;expression de f certains symbole par l\u0026#x2019;élément e en question. Supposons par exemple E=F =R et f la fonction qui a un nombre réel associe son produit par une constante a et ajoute à ce produit une constante b. On a par exemple f(2)=a×2+b. Ce qui change dans le calcul de l\u0026#x2019;image d\u0026#x2019;un élément quelconque, ce ne sont pas les constantes a et b qui sont fixées une fois pour toute pour la fonction f, mais la valeur de l\u0026#x2019;élément. Il est commode de représenter cet état de chose par un symbole auquel on substitue l\u0026#x2019;élément quand celui-ci devient connu. Ce symbole est donc la variable associée à la fonction. Dans le cas de la fonction f ci-dessus, on écrira f(t) = a×t + b. Et t est la variable dans cette expression. Cette variable représente les éléments de l\u0026#x2019;ensemble de départ. C\u0026#x2019;est elle qui varie quand on passe d\u0026#x2019;un élément à un autre, on dit qu\u0026#x2019;elle parcourt l\u0026#x2019;ensemble de départ, ou plus exactement le domaine de définition de la fonction. Il est a noter que ce formalisme permet de décrire f et de connaître ses propriétés mathématiques sans avoir besoin de calculer l\u0026#x2019;image de chaque élément de\u0026nbsp;E.\nCette notion de variable en mathématique est assez proche de la notion de variable en informatique, tout comme l\u0026#x2019;est aussi la notion de fonction. Ainsi, on peut remarquer que donner une valeur à une variable (en mathématique) est similaire à affecter une valeur à une variable (en informatique).\nIl convient aussi de bien remarquer que, même sans explicitement donner des valeurs à a et b dans la fonction f ci-dessus, nous savons que ces symboles représentent des constantes. Mais pour calculer la valeur (réelle) de l\u0026#x2019;image par f d\u0026#x2019;un nombre réel, nous avons nécessairement besoin, à ce moment-là, de connaître les valeurs de ces symboles qui sont constantes et ne changeront donc plus une fois fixées. Là encore on peut remarquer que cette notion de constante en mathématique est assez proche de la notion de constante en informatique.\n2.2. Fonctions numériques élémentaires usuelles. Tableau 3: Fonctions numériques élémentaires usuelles\nNom Expression Principales propriétés Exemples Fonction puissance fa(x)=xa Partout où fa et fb ont à la fois un sens et sont à la fois définies, on a fa+b=fa×fb.\nSi a∈N, fa est définie sur R.\nSi a∈Z, et a\u0026lt;0, fa est définie sur R*.\nSi a∈Q, il faut distinguer deux cas :\n- Si a=p/q avec q pair, alors fa est définie sur R+ si a≥0 et sur R*+ si a\u0026lt;0 - Si a=p/q avec q impair, alors fa est définie sur R si a≥0 et sur R* si a\u0026lt;0.\nPour tout autre cas fa n’a de sens que si a≥0 et n’est définie que sur R*+ ; on a alors f(x)=ealnx. f(x)=x-2/3\nf(x)=x4\nf(x)=x1/3\nf(x)=x1/2. Fonction exponentielle f(x)=ex f(x)×f(y)=f(x+y). f est définie sur R. Fonction exponentielle de base a fa(x)=ax fa n’a de sens que si a\u0026gt;0. On a alors fa(x)×fa(y)=fa(x+y) et fa est définie sur R. f(x)=4x Fonction logarithme f(x)=ln(x) f(x×y)=f(x)+f(y). f est définie sur R*+. Fonction logarithme de base a fa(x)=-ln(a)ln(x) fa a un sens ssi a\u0026gt;1. Si a=10, fa est le logarithme décimal, et noté simplement log. fa est définie sur R*+ là où elle a un sens (a\u0026gt;1). On a fa(x×y)=fa(x)+fa(y). 2.3. Suites et séries numériques réelles Une suite numérique réelle est une application u : N\u0026#x2192;R, n\u0026#x21a6;u(n). On note souvent u(n), l'image par n de u, plus simplement u n . La suite u est souvent notée ( u n ) n \u0026#x2208;N.\nLe terme u n s'apelle le terme général de la suite. Il arrive quelquefois qu'une suite soit définie seulement sur une partie de N. Dans ce cas, on considère qu'elle est définie partout sur N et qu'elle est nulle pour les termes pour lesquels elle n'est pas explicitement définie. Par exemple, si on considère la suite u définie par u n =1/n pour n\u0026gt;0 sans d'autres précisions, on peut toujours supposer que u 0 =0. Une suite n'est interessante que s'il y a une façon de déterminer, pour un entier n quelconque, le terme u n de la suite; on parle alors de suite logique. Une suite logique peut être donnée par une expression de u n en fonction de n; u n =f(n) ou f est une fonction avec Df=N. Une suite logique peut être donnée par une relation entre les termes de la suite. Par exemple u n peut être une fonction de u n \u0026#x2212; 1 ; u n =f( u n \u0026#x2212; 1 ) où f est une fonction et il y a au moins un terme de la suite connu (il existe n0 tel que u no soit connu); dans ce cas on parle de suite recurrente. Un exemple de suite est (suite de Fibonacci) u 0 =0 , u 1 =1 et u n = u n \u0026#x2212; 1 + u n \u0026#x2212; 2 pour n\u0026#x2265;2.\nSoit ( u n ) n \u0026#x2208;N une suite.\nOn apelle série numérique réelle de terme général u n , que l'on note \u0026#x3a3; u n , la suite des sommes partielles ( S n ) n \u0026#x2208;N , où pour tout n\u0026#x2208;N, S n = \u0026#x3a3; k = 0 n u k .\nPar exemple la série de terme général u n =1/n si n\u0026#x2265;1 est définie par S n = \u0026#x3a3; k = 1 n 1 \u0026#x2044; k .\n2.4. Matrices réelles Soient I et J deux ensembles. On appelle matrice à coefficients réels ou encore matrice réelle toute application f : I×J \u0026#x2192; R. Si l\u0026#x2019;on confond f à son image, alors on peut légitimement représenter une matrice f de type I×J par une famille ( f ( i , j ) ) ( i , j ) \u0026#x2208; I × J . On pose plus simplement f(i,j) = f ij et les f ij sont appelés coefficients de la matrice. Un cas particulier important, lorsque I={1,2,\u0026#x2026;m} et J={1,2,\u0026#x2026;n} on dit que f est une matrice de type (m, n). Il est alors commode de représenter f par un tableau rectangulaire du type f= ( a 11 a 12 . . . a 1 n a 21 a 22 . . . a 2 n a m 1 a m 2 a mn ) où f ij = a ij .\nLorsque m=n, la matrice f est dite carrée. Les termes a 11 , a 22 ,\u0026#x2026;, a nn sont appelés les termes diagonaux.\nUne matrice carrée est dite triangulaire supérieure (respectivement inférieure) si les termes situés en dessous (respectivement au-dessus) de la diagonale sont tous nuls.\nOn a respectivement A =( a ij ) avec 1\u0026#x2264;i\u0026#x2264;n, 1\u0026#x2264;j\u0026#x2264;n et a ij =0 si i\u0026gt;j (respectivement i\u0026lt;j). Exemples\u0026nbsp;: A= ( 1 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 ) , B= ( 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 ) , alors A est triangulaire supérieure et B est triangulaire inférieure.\nUne matrice carrée est diagonale si elle est à la fois triangulaire supérieure et triangulaire inférieure. A=( a ij ) avec 1\u0026#x2264;i\u0026#x2264;n, 1\u0026#x2264;j\u0026#x2264;n et a ij =0 si i\u0026#x2260;j.\nDans la suite, on désigne par Mm,n( R ) l\u0026#x2019;ensemble des matrices à m lignes et n colonnes à coefficients réels.\n2.4.1. Adition de deux matrices Soit A=( a ij ) avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;n et B=( b ij ) avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;n deux éléments de Mm,n( R ). On définit la somme C de A et de B par :\nC=A+B et C=( c ij ) avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;n tels que c ij = a ij + b ij . C\u0026#x2208;Mm,n( R ).\n2.4.2. Produit de deux matrices Soient A\u0026#x2208;Mm,n( R ) avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;n et B\u0026#x2208;Mn,p( R ) avec 1\u0026#x2264;i\u0026#x2264;n, 1\u0026#x2264;j\u0026#x2264;p.\nLe produit C=( c ij )avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;p de A et de B est la matrice définie par c ij = \u0026#x3a3; k = 1 n a ik b kj Exemple\u0026nbsp;:A= ( 1 2 3 ) et B= ( 1 2 3 ) , A×B=14 et B×A= ( 1 2 3 2 4 6 3 6 9 ) 2.4.3. Transposition Soit A\u0026#x2208;Mm,n( R ). A=( a ij ) avec 1\u0026#x2264;i\u0026#x2264;m, 1\u0026#x2264;j\u0026#x2264;n. On appelle transposée de A la matrice A \u0026#x22a5; \u0026#x2208;Mn,m( R ) définie par A \u0026#x22a5; =( b ij ) où b ij = a ji .\nExemple\u0026nbsp;:: A= ( 1 2 3 ) et B= ( 1 2 3 ) , alors A \u0026#x22a5; =B et B \u0026#x22a5; =A.\nRemarque: La transposée de la transposée d'une matrice est égale à cette matrice.\n3. Variable aléatoire et fonction de variable aléatoire 3.1. Variable aléatoire Toute mesure d\u0026#x2019;une grandeur X dans un univers \u0026#x3a9; dont les valeurs dépendent du hasard est dite variable aléatoire. On distingue en générale deux types de variable aléatoire. Le type discret et le type continu.\n3.1.1. Variable aléatoire discrète. Une variable aléatoire X est dite discrète lorsque son ensemble de définition, c\u0026#x2019;est-à-dire l\u0026#x2019;ensemble de ses valeurs possibles noté X(\u0026#x3a9;) est un ensemble fini. Un élement de X(\u0026#x3a9;) est appelé un évènement élémentaire. Pour une variable aléatoire discrète X, on définit les notions suivantes :\n3.1.1.1. Loi de probabilité. On appelle loi de probabilité ou encore loi de distribution de la variable aléatoire X la fonction définie par p : X(\u0026#x3a9;)\u0026#x2192;[0, 1], x i \u0026#x21a6;p(X= x i )= p i où x i \u0026#x2208;X(\u0026#x3a9;). On rappelle que\n\u0026#x2200;i, p i \u0026#x2265;0; \u0026#x3a3; p i x i \u0026#x2208; X ( \u0026#x3a9; ) =1 Exemple\u0026nbsp;: Une plante peut avoir de 0 à 4 fleurs avec les probabilités suivantes :\nTableau 4: Exemple de distribution de probabilité Nombre de fleurs xi 0 1 2 3 4 Probabilité pi 2k 1/8 1/8 3/8 k Question: Calculer k pour que ce tableau corresponde à une distribution de probabilité.\nRéponse k=1/8 car la somme des probabilités doit donner 1.\n3.1.1.2. Fonction de répartition On appelle fonction de répartition ou fonction cumulative de la variable aléatoire X la fonction F définie par F : X(\u0026#x3a9;)\u0026#x2192;[0,1], x i \u0026#x21a6;F( x i )=p(X\u0026lt; x i )= \u0026#x3a3; p ( X = x j ) x j \u0026lt; x i .\nRemarque : Certains ouvrages définissent F par F( x i )=p(X \u0026#x2264; x i ).\nParmi les lois de probabilités discrètes, on peut citer :La loi uniforme sur [1,n]. elle est données par p(X=x)=1/n avec x\u0026#x2208;{1,\u0026#x2026;,n}, la loi de Bernoulli de paramètre p. elle est donnée par p(X=x)= p x q 1 \u0026#x2212; x avec p+q=1 et x\u0026#x2208;{0,1}. Elle correspond au schéma succès/échec avec une probabilité de succès p.\nÉtant données deux variables aléatoires X et Y on peut définir une variable aléatoire Z=(X,Y). Z est appelé variable aléatoire à deux dimensions ou couple de variables aléatoires.\nÉtant donnée une variable aléatoire X et une fonction g quelconque, on peut définir une autre variable aléatoire Y par Y=g(X). La détermination de la loi de Y se fait alors en prenant en considération la loi de X et le comportement de la fonction g.\nOn peut utiliser une loi de probabilité connue pour, par exemple, générer des nombres aléatoires. Toutefois, il convient de noter qu'en raison du caractère déterministe des algorithmes informatiques, les nombres générés par les programmes informatiques sont pseudo-aléatoires.\n4. Annexe Tableau 5: Quelques abréviations et symboles usuels, ainsi que leur signification Symbole Description Exemple ssi Si et seulement si. Placé après une expression propositionnelle, exprime une condition nécessaire et suffisante pour que cette expression propositionnelle soit vraie. Un nombre entier est pair ssi son dernier chiffre est pair. Σi=pn Sommation de n-p+1 termes indexés par i, et i variant de p à n. Σi=1ni désigne la somme des n premiers entiers naturels. Il convient alors de remarquer que le résultat de cette somme est identique à Σi=0ni mais la sommation est différente puisque les deux sommations ont un nombre de termes différents. On peut avoir une double, une triple,\u0026hellip; sommation avec deux, trois\u0026hellip; indices ij, ijk,\u0026hellip; chacun des indices variant à son tour. ≤ Placé entre des termes, ce symbole signifie que le membre de gauche est plus petit ou égal au membre de droite (usage restreint). Mais plus généralement, il signifie que le membre de gauche est en relation avec le membre de droite ou lui est égal (usage élargi). Pour l\u0026rsquo;ordre naturel sur l\u0026rsquo;ensemble des entiers naturels N, 1≤2 et 2≤2. Pour la relation de divisibilité dans N, c\u0026rsquo;est-à-dire a en relation avec b ssi a divise b ; 2≤4 et 2≤2, mais on ne peut pas comparer 2 et 5. ≥ Placé entre des termes, ce symbole signifie que le membre de gauche est plus grand ou égal au membre de droite (usage restreint). Mais plus généralement, il signifie que le membre de gauche est en relation avec le membre de droite ou lui est égal (usage élargi). Pour l\u0026rsquo;ordre naturel sur l\u0026rsquo;ensemble des entiers naturels N, 2≥1 et 2≥2. Pour la relation de divisibilité dans N, c\u0026rsquo;est-à-dire a en relation avec b ssi a divise b ; 4≥2 et 2≥2, mais on ne peut pas comparer 5 et 2. \u0026lt; Placé entre des termes, ce symbole signifie que le membre de gauche est strictement plus petit que le membre de droite (usage restreint). Mais plus généralement, il signifie que le membre de gauche est en relation avec le membre de droite et lui est différent (usage élargi). Pour l\u0026rsquo;ordre naturel sur l\u0026rsquo;ensemble des entiers naturels N, 1\u0026lt;2. Pour la relation de divisibilité dans N, c\u0026rsquo;est-à-dire a en relation avec b ssi a divise b ; 2\u0026lt;4, mais on ne peut pas comparer 2 et 5. \u0026gt; Placé entre des termes, ce symbole signifie que le membre de gauche est strictement plus grand que le membre de droite (usage restreint). Mais plus généralement, il signifie que le membre de gauche est en relation avec le membre de droite et lui est différent (usage élargi). Pour l\u0026rsquo;ordre naturel sur l\u0026rsquo;ensemble des entiers naturels N, 2\u0026gt;1. Pour la relation de divisibilité dans N, c\u0026rsquo;est-à-dire a en relation avec b ssi a divise b ; 4\u0026gt;2, mais on ne peut pas comparer 5 et 2. ∀ Quantificateur universel. ∀ a se lit pour tout a\u0026hellip; ∀ a∈N, a≥0 pour tout élément a de l\u0026rsquo;ensemble N, a est supérieur ou égal à 0. ∃ Quantificateur existentiel. ∃ a se lit il existe au moins un a\u0026hellip; ∃ a∈N tel que a≠0, il existe au moins un élément a de l\u0026rsquo;ensemble N qui est différent de 0. ∈ C\u0026rsquo;est le symbole d\u0026rsquo;appartenance. a∈A signifie que a est un élément de l\u0026rsquo;ensemble A. Utilisé après un quantificateur, et une suite de symboles, il signifie que ces symboles sont éléments de l\u0026rsquo;ensemble qui suit. Par exemple : ∀ a,b,c ∈N signifie pour tous éléments a, b et c de N. ∉ C\u0026rsquo;est le symbole de non-appartenance. a∉A signifie que a n\u0026rsquo;est pas un élément de l\u0026rsquo;ensemble A. −1∉N. ⊆ Placé entre deux ensembles, signifie que l\u0026rsquo;ensemble de gauche est inclus dans l\u0026rsquo;ensemble de droite ou lui est égal. Si A et B sont deux ensembles, A⊆A∪B. ⊂ Placé entre deux ensembles, signifie que l\u0026rsquo;ensemble de gauche est strictement inclus dans l\u0026rsquo;ensemble de droite (et donc en est différent). N⊂Z. ⇒ Implication logique. Placé entre deux propositions, ce symbole indique que la proposition de gauche implique celle de droite. p⇒q est faux ssi p est vrai et q faux. | | Valeur absolue. Si a est placé entre les deux barres, le résultat est le nombre positif a si a est positif et -a si a est négatif. |a|=a si a≥0 et |a|=−a si a≤0. |-2|=|2|=2. "},{"id":41,"href":"/inf1901-teluq/docs/ia/","title":"Intelligence artificielle","section":"Docs","content":" Dans ce cours, l'utilisation de l'intelligence artificielle (Claude, ChatGPT, Copilot, Grok, etc.) est permise (mais optionnelle). Cependant, vous devez l'utiliser de manière responsable\u0026nbsp;:\nDécrivez votre utilisation de l'IA. Une utilisation de l'IA sans déclaration peut être considérée comme une forme de faute. Contrairement à ce que vous pourriez croire, déclarer votre utilisation de l'IA vous protège. Expliquez votre démarche. Qu'est-ce que vous avez fait avec l'IA\u0026nbsp;? Nous vous encourageons à inclure des copies des résultats de vos interactions avec l'IA. Assurez-vous de bien expliquer vos résultats, en vos propres mots. "},{"id":42,"href":"/inf1901-teluq/docs/courriel/","title":"Petit guide d’usage du courriel efficace","section":"Docs","content":"Lors de l\u0026rsquo;écriture d\u0026rsquo;un courriel, être bref est important. Omettez les formules de salutation, les signatures surfaites, etc.\nAttention aux émotions : Il est facile quand on reçoit ou transmet un courriel de s\u0026rsquo;emporter ou de lire dans les messages reçus des sentiments. Dans un contexte professionnel, évitez d\u0026rsquo;écrire un courriel alors que vous êtes énervé.\nChoisissez les destinataires de votre courriel avec soin. Il est pratiquement toujours mal avisé de transmettre un courriel à un grand groupe, à moins que le courriel soit une communication formelle. Dans le doute, écrivez un courriel à un seul destinataire.\nAvant de répondre à un courriel, prenez le temps de bien le lire. Si on vous demande de fournir des informations ou détails additionnels, prenez le temps de le faire, ou expliquez clairement pourquoi cela n\u0026rsquo;est pas possible ou souhaitable.\nL\u0026rsquo;objet d\u0026rsquo;un courriel doit en refléter le contenu. Il faut éviter les objets génériques (par ex., « une question »). Il faut éviter à tout prix les objets qui ne réflètent pas le contenu (par ex. intitulé un cours « travail 2 » alors que celui-ci porte en fait sur l\u0026rsquo;examen. Si vous utilisez un objet de courriel vague ou absent, il faut vous attendre à ce que votre courriel puisse ne pas être traité correctement.\nSi vous avez plusieurs sujets distincts, il est souvent préférable d\u0026rsquo;écrire plusieurs courriels distincts, chacun ayant un objet distinct.\nDans un contexte professionnel, il est nettement préférable d\u0026rsquo;envoyer un courriel identifié à votre nom. Il n\u0026rsquo;est pas pratique d\u0026rsquo;envoyer des courriels vous identifiant sous le nom de votre conjoint, par exemple. Il peut être amusant de se donner des pseudonymes (« la chouette », « le montréalais ») entre amis, mais ce n\u0026rsquo;est pas souhaitable dans un contexte professionnel.\nUn courriel destiné à un humain doit obligatoirement avoir un corps de texte. Un courriel doit être clair et fournir tous les détails nécessaires. Par exemple, si vous écrivez à quelqu\u0026rsquo;un pour lui faire part d\u0026rsquo;un problème ou d\u0026rsquo;une incompréhension, il faut fournir tous les détails, incluant les démarches que vous avez déjà entreprises. On peut être précis sans nécessairement utiliser beaucoup de mots. Préparer un courriel précis peut exiger plus d\u0026rsquo;effort et de temps, mais c\u0026rsquo;est un signe de respect envers le récipiendaire.\nSi vous écrivez un courriel pour faire rapport de problèmes techniques, soyez aussi précis que possible. Joignez des saisies d\u0026rsquo;écran au besoin.\nLorsque possible, on évite les pièces jointes. Lorsque celles-ci sont nécessaires, on s\u0026rsquo;assure que le récipiendaire pourra aisément en prendre connaissance. ll faut donc éviter les formats de fichier qui ne correspondent pas à un usage courant. Les formats propriétaires qui ne sont pas courants et qui nécessitent l\u0026rsquo;installation de logiciel particulier sont à éviter.\nLes fichiers de bureautique (par ex., Word, PDF) sont déjà compressés. Transmettre les fichiers en question dans une archive compressée ajoute des manipulations inutiles.\nÀ moins de transmettre des fichiers très volumineux, la compression des fichiers attachés est inutile étant donné la généreuse bande passante dont nous bénéficions. Si on doit utiliser un format d\u0026rsquo;archive compressé, il faut utiliser un format qui est largement supporté par les divers systèmes d\u0026rsquo;exploitation (comme le format zip basique).\nCertains logiciels de courriel (Outlook) ne permettent pas la transmission de fichiers avec certaines extensions. Dans de tels cas, il est acceptable de renommer l\u0026rsquo;extension du fichier et d\u0026rsquo;inclure dans le corps du message une explication. Par exemple, tous les fichiers au format texte (.xml, .html), peuvent être transmis avec l\u0026rsquo;extension « .txt ».\nLes courriels automatisés non sollicités sont du pourriel. Ainsi, il ne faut pas transmettre des réponses automatisées (par ex., des accusés de réception) à des destinateurs non avisés.\nLes protocoles Internet utilisés pour transmettre nos courriels nous assurent déjà de la bonne réception des courriels avec une grande probabilité et un courriel automatisé de réponse ne nous assure pas que le récipiendaire a effectivement pris en compte le courriel. Il est légitime de relancer un destinataire après un délai raisonable pour s\u0026rsquo;assurer que notre envoi a été bien reçu et traité. Par contre, il est normalement considéré impoli et abusif d\u0026rsquo;exiger des accusés de réception.\nLe courriel n\u0026rsquo;est pas toujours le meilleur outil pour obtenir de l\u0026rsquo;information. Il est souvent souhaitable de faire au préalable vos propres recherches. Dans tous les cas, montrez au destinataire que vous avez fait un effort avant d\u0026rsquo;écrire votre courriel.\nLe courriel n\u0026rsquo;est pas, en général, un moyen d\u0026rsquo;échange préservant la confidentialité. Ne transmettez pas vos mots de passe ou toute autre information confidentielle par courriel.\nSi vous écrivez au professeur responsable du cours ou à la personne qui vous encadre, n\u0026rsquo;oubliez d\u0026rsquo;inclure le sigle du cours dans votre courriel ([inf1220]).\n"},{"id":43,"href":"/inf1901-teluq/docs/modules/","title":"Modules","section":"Docs","content":" Modules # Sélectionnez un module dans le menu pour accéder à son contenu:\nModule 1. Algorithme et pseudocode. Dans ce module, vous verrez comment concevoir des algorithmes simples et comment les présenter de manière précise en français. Module 2. Introduction au langage Java. Le concept de programme. Les types, les fonctions, les méthodes, les variables. Les variables de classe et les variables locales. Module 3. Les structures de données, de contrôle et d'itération en Java. Manipulation de chaînes de caractères. Mise en oeuvre d'algorithmes avec des boucles. Module 4. Les entrées et sorties. Module 5. La programmation orientée-objet: héritage et le polymorphisme. "}]